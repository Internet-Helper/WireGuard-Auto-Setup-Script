#!/bin/bash

# WireGuard Easy Setup by Internet Helper (Version 1.0 - Start)

set -e

# --- –§–£–ù–ö–¶–ò–Ø-–ü–ï–†–ï–•–í–ê–¢–ß–ò–ö –î–õ–Ø –ê–í–ê–†–ò–ô–ù–û–ì–û –ó–ê–í–ï–†–®–ï–ù–ò–Ø ---
cleanup_on_exit() {
    echo -e "\n\n‚ùå –°–∫—Ä–∏–ø—Ç –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞..."
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
    if [ -n "$SERVER_PID" ] && ps -p "$SERVER_PID" > /dev/null; then
        sudo kill "$SERVER_PID" 2>/dev/null
    fi
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤, –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
    if [ -n "$CONFIG_DIR" ] && [ -n "$ARCHIVE_NAME" ] && [ -f "$CONFIG_DIR/$ARCHIVE_NAME" ]; then
        sudo rm -f "$CONFIG_DIR/$ARCHIVE_NAME"
    fi
    echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –∫–æ–¥–æ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—é –ø–æ Ctrl+C
    exit 130
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C) –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
trap cleanup_on_exit INT TERM

# --- –§–£–ù–ö–¶–ò–Ø: –ï–î–ò–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ò –ü–ï–†–í–û–ú –ó–ê–ü–£–°–ö–ï (–ó–ê–í–ò–°–ò–ú–û–°–¢–ò –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨) ---
run_first_time_setup() {
    local CHECKED_FLAG_FILE="/etc/wireguard/.checked"
    if [ -f "$CHECKED_FLAG_FILE" ]; then
        return 0
    fi

    echo "‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
    if ! command -v apt-get &> /dev/null; then
        echo "‚ùå –û—à–∏–±–∫–∞! –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Debian-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (–∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö apt)."
        echo "‚ùå –ù–∞ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä 'apt-get'."
        exit 1
    fi
    
    local missing_deps=()
    ! command -v wg &> /dev/null && missing_deps+=("wireguard-tools")
    ! command -v qrencode &> /dev/null && missing_deps+=("qrencode")
    ! command -v zip &> /dev/null && missing_deps+=("zip")
    ! command -v python3 &> /dev/null && missing_deps+=("python3")
    ! command -v sudo &> /dev/null && missing_deps+=("sudo")
    ! command -v ss &> /dev/null && ! command -v netstat &> /dev/null && missing_deps+=("iproute2" "net-tools")

    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:"
        printf '   %s\n' "${missing_deps[@]}"
        read -p "‚ùì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (1 - –¥–∞, 2 - –Ω–µ—Ç): " choice
        if [[ "$choice" == "1" ]]; then
            echo "üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞..."
            sudo apt-get update
            sudo apt-get install -y "${missing_deps[@]}"
            echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        else
            echo "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–∫—Ä–∏–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤."
            exit 1
        fi
        echo
    else
        echo "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
    fi

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ---
    echo "üõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    local needs_pause=false

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –∏ Firewall
    security_issues=false

    if command -v sshd &> /dev/null; then
       local permit_root_login
       permit_root_login=$(sudo sshd -T | grep -i '^permitrootlogin' | awk '{print $2}')
       local password_auth
       password_auth=$(sudo sshd -T | grep -i '^passwordauthentication' | awk '{print $2}')
       if [[ "$permit_root_login" != "no" ]] || [[ "$password_auth" != "no" ]]; then
           if [[ "$password_auth" != "no" ]]; then
               echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–∞—Ä–æ–ª—é"
           fi
           security_issues=true
       fi
    fi

    if command -v iptables &> /dev/null; then
       local input_policy
       input_policy=$(sudo iptables -L INPUT -n 2>/dev/null | head -n 1 | grep -oP 'policy \K[A-Z]+')
       local forward_policy
       forward_policy=$(sudo iptables -L FORWARD -n 2>/dev/null | head -n 1 | grep -oP 'policy \K[A-Z]+')
       if [[ "$input_policy" == "ACCEPT" ]] || [[ "$forward_policy" == "ACCEPT" ]]; then
           if [[ "$input_policy" == "ACCEPT" ]]; then
               echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: –í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ - —Ä–∞–∑—Ä–µ—à–µ–Ω"
           fi
           if [[ "$forward_policy" == "ACCEPT" ]]; then
               echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: –¢—Ä–∞–Ω–∑–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ - —Ä–∞–∑—Ä–µ—à–µ–Ω"
           fi
           security_issues=true
       fi
    fi

    if [[ "$security_issues" == true ]]; then
       printf "\n\033[1;33m‚ö†Ô∏è  –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\033[0m\n"
       printf "üîó https://github.com/Internet-Helper/WireGuard-Auto-Setup-Script/wiki \n"
       needs_pause=true
    fi
    
    # –ï—Å–ª–∏ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
    if [ "$needs_pause" = true ]; then
        echo
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å..."
        echo
    fi
    
    echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã."
    sudo mkdir -p /etc/wireguard
    sudo touch "$CHECKED_FLAG_FILE"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
}

SERVER_HAS_PUBLIC_IPV6="false"

# --- –§–£–ù–ö–¶–ò–Ø: –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–£–ë–õ–ò–ß–ù–û–ì–û IP-–ê–î–†–ï–°–ê –°–ï–†–í–ï–†–ê ---
get_server_public_ip() {
    SERVER_HAS_PUBLIC_IPV6="false"
    local public_ip_v4=""
    local public_ip_v6=""

    for iface in $(ip -o link show | awk -F': ' '{print $2}' | grep -v 'lo'); do
        public_ip_v4=$(ip -4 addr show "$iface" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep -vE '^(127\.|10\.|172\.(1[6-9]|2[0-9]|3[0-1])\.|192\.168\.|169\.254\.)' | head -n 1)
        if [ -n "$public_ip_v4" ]; then
            break
        fi
    done
    
    if [ -z "$public_ip_v4" ]; then
        public_ip_v4=$(ip route get 8.8.8.8 2>/dev/null | awk '{print $7; exit}')
    fi

    for iface in $(ip -o link show | awk -F': ' '{print $2}' | grep -v 'lo'); do
        public_ip_v6=$(ip -6 addr show "$iface" scope global 2>/dev/null | grep -oP '(?<=inet6\s)[\da-f:]+(?<!::)/\d+' | grep -v '2001:db8' | head -n 1)
        if [ -n "$public_ip_v6" ]; then
            SERVER_HAS_PUBLIC_IPV6="true"
            break
        fi
    done

    if [ -n "$public_ip_v4" ]; then
        echo "$public_ip_v4"
        return 0
    else
        echo "error"
        return 1
    fi
}


# --- –§–£–ù–ö–¶–ò–Ø-–ü–û–ú–û–©–ù–ò–ö –î–õ–Ø –ü–ê–£–ó–´ –ü–û–°–õ–ï –í–ê–ñ–ù–´–• –û–ü–ï–†–ê–¶–ò–ô ---
pause_and_wait() {
    echo
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
}

# --- –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò –î–õ–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
get_dns_settings() {
    local __result_var=$1
    local has_ipv6=$2
    local dns_line=""

    echo
    printf "\033[38;5;242müí° –ü–û–î–°–ö–ê–ó–ö–ê:\n"
    printf "   –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–æ–π—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç–∞–º –≤—Ä–æ–¥–µ –°hatGPT, Canva –∏ —Ç.–¥.\033[0m\n"
    read -p "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ DNS? (1 - –¥–∞, 2 - –Ω–µ—Ç): " use_dns_choice
    if [[ "$use_dns_choice" != "1" ]]; then
        printf -v "$__result_var" ''
        return
    fi
    
    echo
    echo "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ DNS:"
    echo "   1. Cloudflare + Google"
    echo "   2. –ü—Ä–æ–∫—Å–∏ DNS (–æ–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ - –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤)"
    
    local dns_selection
    while true; do
        read -p "-> " dns_selection
        if [[ "$dns_selection" == "1" || "$dns_selection" == "2" ]]; then
            break
        else
            echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä."
        fi
    done

    local dns_ipv4 dns_ipv6
    if [[ "$dns_selection" == "1" ]]; then
        dns_ipv4="1.1.1.1, 1.0.0.1, 8.8.8.8, 8.8.4.4"
        dns_ipv6="2606:4700:4700::1111, 2606:4700:4700::1001, 2001:4860:4860::8888, 2001:4860:4860::8844"
    else
        dns_ipv4="185.87.51.182, 45.95.233.23, 64.188.98.242"
        dns_ipv6="2a05:541:104:7f::1, 2a01:ecc0:2c1:2::2"
    fi

    if [[ "$has_ipv6" == "true" ]]; then
        dns_line="DNS = $dns_ipv4, $dns_ipv6"
        echo "   (i) –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π IPv6, –≤ DNS –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–¥—Ä–µ—Å–∞ AAAA."
    else
        dns_line="DNS = $dns_ipv4"
    fi
    
    printf -v "$__result_var" '%s' "$dns_line"
}

get_obfuscation_settings() {
    local __result_var=$1
    local obfuscation_settings=""
    
    echo
    read -p "‚ùì –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º—É—Å–æ—Ä–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ Wireguard? (1 - –¥–∞, 2 - –Ω–µ—Ç): " use_obfs_choice
    if [[ "$use_obfs_choice" != "1" ]]; then
        printf -v "$__result_var" ''
        return
    fi
    
    echo
    echo "‚öôÔ∏è  –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏:"
    echo "   1. Jc = 4, Jmin = 40, Jmax = 70"
    echo "   2. Jc = 8, Jmin = 40, Jmax = 70"
    echo "   3. Jc = 120, Jmin = 23, Jmax = 911"
    echo "   4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"
    
    local obfs_selection
    while true; do
        read -p "-> " obfs_selection
        if [[ "$obfs_selection" =~ ^[1-4]$ ]]; then
            break
        else
            echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä."
        fi
    done

    local jc jmin jmax
    case $obfs_selection in
        1) jc=4; jmin=40; jmax=70 ;;
        2) jc=8; jmin=40; jmax=70 ;;
        3) jc=120; jmin=23; jmax=911 ;;
        4) 
           jc=$((RANDOM % (125 - 8 + 1) + 8))
           jmin=$((RANDOM % (50 - 10 + 1) + 10))
           jmax=$((RANDOM % (950 - 100 + 1) + 100))
           echo "üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: Jc = $jc, Jmin = $jmin, Jmax = $jmax"
           ;;
    esac

    printf -v obfuscation_settings "Jc = %d\nJmin = %d\nJmax = %d\nS1 = 0\nS2 = 0\nH1 = 1\nH2 = 2\nH3 = 3\nH4 = 4" "$jc" "$jmin" "$jmax"
    
    printf -v "$__result_var" '%s' "$obfuscation_settings"
}

get_network_base() {
    local __result_var=$1
    local context=$2
    local prompt_message=$3
    shift 3
    local used_subnets=("${@}")
    
    local tunnel_subnets
    tunnel_subnets=$(sudo grep -hRo --exclude='*.zip' 'Address\s*=\s*[0-9\.\/]*' /etc/wireguard/*/wg-*.conf 2>/dev/null | grep -o '[0-9\.]\+\/24' | sed 's/\.[0-9]\{1,3\}\/24$/\.0\/24/' || true)
    
    local lan_subnets
    lan_subnets=$(sudo grep -hRo --exclude='*.zip' 'AllowedIPs\s*=\s*.*' /etc/wireguard/*/wg-*.conf 2>/dev/null | \
                  tr ',' '\n' | \
                  grep -oP '(192\.168(\.[0-9]{1,3}){1,2}|172\.(1[6-9]|2[0-9]|3[0-1])\.[0-9]{1,3}|10(\.[0-9]{1,3}){1,2})\.0\/24' || true)

    mapfile -t existing_subnets < <(printf "%s\n%s\n%s" "$tunnel_subnets" "$lan_subnets" "$(IFS=$'\n'; echo "${used_subnets[*]}")" | grep . | sort -u)

    find_free_subnet() {
        local base_prefix=$1
        local is_taken
        if [[ "$base_prefix" == "192.168" ]]; then
            for i in {0..255}; do
                local p_subnet="192.168.$i.0/24"
                is_taken=false; for used in "${existing_subnets[@]}"; do if [[ "$used" == "$p_subnet" ]]; then is_taken=true; break; fi; done
                if ! $is_taken; then echo "$p_subnet"; return; fi
            done
        elif [[ "$base_prefix" == "172" ]]; then
             for i in {16..31}; do
                for j in {0..255}; do
                    local p_subnet="172.$i.$j.0/24"
                    is_taken=false; for used in "${existing_subnets[@]}"; do if [[ "$used" == "$p_subnet" ]]; then is_taken=true; break; fi; done
                    if ! $is_taken; then echo "$p_subnet"; return; fi
                done
            done
        elif [[ "$base_prefix" == "10" ]]; then
            for i in {0..255}; do
                for j in {0..255}; do
                    local p_subnet="10.$i.$j.0/24"
                    is_taken=false; for used in "${existing_subnets[@]}"; do if [[ "$used" == "$p_subnet" ]]; then is_taken=true; break; fi; done
                    if ! $is_taken; then echo "$p_subnet"; return; fi
                done
            done
        fi
        echo ""
    }

    local suggested_192; suggested_192=$(find_free_subnet "192.168")
    local suggested_172; suggested_172=$(find_free_subnet "172")
    local suggested_10;  suggested_10=$(find_free_subnet "10")

    while true; do
        echo; echo "‚ùì $prompt_message"
        local opt1 opt2 opt3 val1 val2 val3
        if [[ "$context" == "router" ]]; then
            opt1="$suggested_192 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"; val1="$suggested_192"
            opt2="$suggested_172"; val2="$suggested_172"
            opt3="$suggested_10"; val3="$suggested_10"
        else
            opt1="$suggested_172 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"; val1="$suggested_172"
            opt2="$suggested_10"; val2="$suggested_10"
            opt3="$suggested_192"; val3="$suggested_192"
        fi

        [ -n "$val1" ] && echo "   1) $opt1"
        [ -n "$val2" ] && echo "   2) $opt2"
        [ -n "$val3" ] && echo "   3) $opt3"
        echo "   4) –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø–æ–¥—Å–µ—Ç—å"
        read -p "-> " choice

        local chosen_subnet=""
        case $choice in
            1) chosen_subnet=$val1 ;;
            2) chosen_subnet=$val2 ;;
            3) chosen_subnet=$val3 ;;
            4) 
                read -p "üîé –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –ø–æ–¥—Å–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.100.200 –∏–ª–∏ 192.168.55): " custom_prefix
                if [[ "$custom_prefix" =~ ^(10\.([0-9]{1,3}\.){1,2}[0-9]{1,3})$ || "$custom_prefix" =~ ^(172\.(1[6-9]|2[0-9]|3[0-1])\.[0-9]{1,3})$ || "$custom_prefix" =~ ^(192\.168\.[0-9]{1,3})$ ]]; then
                    local proposed_subnet="${custom_prefix}.0/24"
                    local is_taken=false
                    for used in "${existing_subnets[@]}"; do if [[ "$used" == "$proposed_subnet" ]]; then is_taken=true; break; fi; done
                    if $is_taken; then
                        echo "‚ùå –û—à–∏–±–∫–∞! –ü–æ–¥—Å–µ—Ç—å $proposed_subnet —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è."
                        continue
                    else
                        chosen_subnet="$proposed_subnet"
                    fi
                else
                    echo "‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Å–µ—Ç–∏."
                    echo "   –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã: 10.[0-255].[0-255], 172.[16-31].[0-255] –∏–ª–∏ 192.168.[0-255]"
                    continue
                fi
                ;;
            *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä."; continue ;;
        esac

        if [ -n "$chosen_subnet" ]; then
            printf -v "$__result_var" '%s' "$chosen_subnet"
            return 0
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        fi
    done
}

get_wg_network() {
    local __result_var=$1
    get_network_base "$__result_var" "wg" "–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Å–µ—Ç—å –¥–ª—è WireGuard —Ç—É–Ω–Ω–µ–ª—è:"
}

get_router_lan_subnet() {
    local __result_var=$1
    local router_num=$2
    shift 2
    get_network_base "$__result_var" "router" "–£–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–æ–¥—Å–µ—Ç—å –¥–ª—è üì° —Ä–æ—É—Ç–µ—Ä–∞ $router_num:" "$@"
}

get_config_mode() {
    local conf_name=$1
    local config_file
    
    config_file=$(sudo find "/etc/wireguard/$conf_name" -name "wg-*.conf" -print -quit 2>/dev/null)

    if [ -f "$config_file" ]; then
        if sudo grep -q "(Mode 1)" "$config_file"; then
            echo "[‚òÅÔ∏è  –°–µ—Ä–≤–µ—Ä]"
        elif sudo grep -q "(Mode 2)" "$config_file"; then
            echo "[üì° –†–æ—É—Ç–µ—Ä]"
        elif sudo grep -q "(Mode 3)" "$config_file"; then
            echo "[üè† LAN]"
        else
            echo ""
        fi
    else
        echo ""
    fi
}

is_config_truly_active() {
    local conf_name=$1
    if systemctl is-active --quiet "wg-quick@wg-$conf_name" && sudo wg show "wg-$conf_name" &>/dev/null; then
        return 0
    else
        return 1
    fi
}

verify_tunnel_activation() {
    local WG_INTERFACE=$1
    echo "‚åõ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏..."
    sleep 2 
    if sudo wg show "$WG_INTERFACE" &>/dev/null; then
        echo "‚úÖ –¢—É–Ω–Ω–µ–ª—å '$WG_INTERFACE' —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
        return 0
    else
        echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—É–Ω–Ω–µ–ª—å '$WG_INTERFACE'"
        echo "‚ö†Ô∏è  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏: journalctl -u wg-quick@${WG_INTERFACE} -e"
        return 1
    fi
}

deep_clean_config() {
    local CONFIG_NAME=$1
    local WG_INTERFACE="wg-$CONFIG_NAME"
    
    sudo wg-quick down "$WG_INTERFACE" &>/dev/null || true
    sudo systemctl stop "wg-quick@${WG_INTERFACE}" &>/dev/null || true
    sudo systemctl disable "wg-quick@${WG_INTERFACE}" &>/dev/null || true
    
    sudo rm -f "/etc/wireguard/${WG_INTERFACE}.conf"
    sudo rm -rf "/etc/wireguard/$CONFIG_NAME"

    if ip link show "$WG_INTERFACE" &>/dev/null; then
        sudo ip link delete dev "$WG_INTERFACE"
    fi
    echo -e "\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ '$CONFIG_NAME' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

export_configs() {
    CONFIG_NAME=$1
    CONFIG_DIR="/etc/wireguard/$CONFIG_NAME"
    ARCHIVE_NAME="${CONFIG_NAME}.zip"

    if [ -z "$(sudo find "$CONFIG_DIR" -maxdepth 1 -type f \( -name 'client*.conf' -o -name 'router*.conf' \) -print -quit)" ]; then
        echo "‚ÑπÔ∏è  –ö–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è '$CONFIG_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞—é."
        return
    fi

    sudo zip -j "$CONFIG_DIR/$ARCHIVE_NAME" "$CONFIG_DIR"/client*.conf "$CONFIG_DIR"/router*.conf > /dev/null 2>&1

    local PORT=58585
    if command -v ss &> /dev/null; then
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ss –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
        while sudo ss -tlnp | grep -q ":$PORT "; do
            PORT=$((PORT + 1))
        done
    elif command -v netstat &> /dev/null; then
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º netstat –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        while sudo netstat -tlnp | grep -q ":$PORT "; do
            PORT=$((PORT + 1))
        done
    else
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ ss, –Ω–∏ netstat, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        echo "‚ö†Ô∏è  –£—Ç–∏–ª–∏—Ç—ã 'ss' –∏ 'netstat' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É—é 58800 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    fi
    
    local SERVER_IP; SERVER_IP=$(get_server_public_ip)
    if [ "$SERVER_IP" == "error" ]; then
        echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Endpoint."
        return 1
    fi

    cd "$CONFIG_DIR"
    sudo sh -c "python3 -m http.server $PORT > /dev/null 2>&1" &
    SERVER_PID=$!
    cd - > /dev/null

    local cleanup_command="sleep 600; if ps -p $SERVER_PID > /dev/null; then sudo kill $SERVER_PID 2>/dev/null; sudo rm -f '$CONFIG_DIR/$ARCHIVE_NAME'; fi"
    nohup sh -c "$cleanup_command" >/dev/null 2>&1 &
    local TIMER_PID=$!

    printf "üìå –°—Å—ã–ª–∫–∞ –Ω–∞ –∞—Ä—Ö–∏–≤ %s:\n" "$ARCHIVE_NAME"
    printf "üîó http://%s:%s/%s\n\n" "$SERVER_IP" "$PORT" "$ARCHIVE_NAME"
    
    echo "üì± –ò–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞:"
    echo
    if command -v qrencode &>/dev/null; then
        qrencode -t ansiutf8 -m 1 "http://${SERVER_IP}:${PORT}/${ARCHIVE_NAME}"
    else
        echo "   (qrencode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, QR-–∫–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω)"
    fi
    echo

    read -p "üìå –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ 10 –º–∏–Ω—É—Ç, –∏–ª–∏ –ø–æ–∫–∞ –≤—ã –Ω–µ –Ω–∞–∂–º–µ—Ç–µ Enter... "

    echo
    sudo kill $SERVER_PID 2>/dev/null
    if ps -p $TIMER_PID > /dev/null; then
        kill $TIMER_PID 2>/dev/null 
    fi
    sudo rm -f "$CONFIG_DIR/$ARCHIVE_NAME"

    unset SERVER_PID CONFIG_NAME CONFIG_DIR ARCHIVE_NAME
}

generate_client_allowed_ips_string() {
    local subnets_to_process=("$@")
    local broad_subnets=()
    for subnet in "${subnets_to_process[@]}"; do
        if [[ "$subnet" =~ ^10\. ]]; then
            broad_subnets+=("10.0.0.0/16")
        elif [[ "$subnet" =~ ^172\.(1[6-9]|2[0-9]|3[0-1])\. ]]; then
            broad_subnets+=("172.16.0.0/12")
        elif [[ "$subnet" =~ ^192\.168\. ]]; then
            broad_subnets+=("192.168.0.0/16")
        fi
    done
    printf "%s\n" "${broad_subnets[@]}" | sort -u | paste -sd ',' | sed 's/,/, /g'
}

# --- –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø: –†–ï–ñ–ò–ú 1 ---
run_creation_flow_mode1() {
    local CONFIG_NAME=$1; local CONFIG_DIR="/etc/wireguard/$CONFIG_NAME"; local WG_INTERFACE="wg-$CONFIG_NAME"
    
    if ip link show "$WG_INTERFACE" &>/dev/null; then echo "‚ùå –û—à–∏–±–∫–∞: –°–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å '$WG_INTERFACE' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."; return 1; fi
    
    DEFAULT_INTERFACE=$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)
    if [ -z "$DEFAULT_INTERFACE" ]; then echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."; return 1; fi
    
    SERVER_IP=$(get_server_public_ip)
    if [ "$SERVER_IP" == "error" ]; then echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞."; return 1; fi

    local max_port=58799
    if [ -d "/etc/wireguard" ]; then
        for dir in /etc/wireguard/*/ ; do
            if [ -d "$dir" ] && [ "$dir" != "$CONFIG_DIR/" ]; then
                config_file=$(sudo find "$dir" -name "wg-*.conf" -print -quit 2>/dev/null); if [ -f "$config_file" ]; then
                    port=$(sudo grep -oP 'ListenPort\s*=\s*\K[0-9]+' "$config_file" | head -n 1 || echo "0"); if [[ "$port" -gt "$max_port" ]]; then max_port=$port; fi
                fi
            fi
        done
    fi
    
    local LISTEN_PORT
    local SUGGESTED_PORT=$((max_port + 1))
    echo
    while true; do
        read -p "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç (–Ω–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '$SUGGESTED_PORT'): " user_port
        LISTEN_PORT=${user_port:-$SUGGESTED_PORT}
        if ! [[ "$LISTEN_PORT" =~ ^[0-9]+$ ]] || [ "$LISTEN_PORT" -lt 1024 ] || [ "$LISTEN_PORT" -gt 65535 ]; then
            echo "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ (1024-65535)."
            continue
        fi
        if sudo grep -qR --include='wg-*.conf' "^\s*ListenPort\s*=\s*$LISTEN_PORT\s*$" /etc/wireguard/ 2>/dev/null; then
            local conflicting_config
            conflicting_config=$(sudo grep -lR --include='wg-*.conf' "^\s*ListenPort\s*=\s*$LISTEN_PORT\s*$" /etc/wireguard/ | head -n 1 | xargs dirname | xargs basename)
            echo "‚ùå –û—à–∏–±–∫–∞! –ü–æ—Ä—Ç $LISTEN_PORT —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π '$conflicting_config'."
            continue
        fi
        break
    done

    local WG_SUBNET_V4; get_wg_network WG_SUBNET_V4
    if [ -z "$WG_SUBNET_V4" ]; then echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Å–µ—Ç—å –¥–ª—è WireGuard."; return 1; fi
    local WG_NETWORK_V4_PREFIX; WG_NETWORK_V4_PREFIX=$(echo "$WG_SUBNET_V4" | cut -d'.' -f1-3)

    echo
    while true; do read -p "‚ùì –°–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è '$CONFIG_NAME'? (1-253): " CLIENT_COUNT
        if [[ "$CLIENT_COUNT" =~ ^[0-9]+$ ]] && [ "$CLIENT_COUNT" -ge 1 ] && [ "$CLIENT_COUNT" -le 253 ]; then break; else echo "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 253."; fi
    done

    local DNS_SETTINGS; get_dns_settings DNS_SETTINGS "$SERVER_HAS_PUBLIC_IPV6"
    local OBFUSCATION_SETTINGS; get_obfuscation_settings OBFUSCATION_SETTINGS
    
    local SERVER_ADDRESS_LINE="Address = ${WG_NETWORK_V4_PREFIX}.1/24"
    local POST_UP_CMDS="PostUp = iptables -A FORWARD -i %i -j ACCEPT --wait 10; iptables -t nat -A POSTROUTING -o $DEFAULT_INTERFACE -j MASQUERADE --wait 10"
    local POST_DOWN_CMDS="PostDown = iptables -D FORWARD -i %i -j ACCEPT --wait 10; iptables -t nat -D POSTROUTING -o $DEFAULT_INTERFACE -j MASQUERADE --wait 10"
    
    local NEW_OCTET_3=$(echo $WG_NETWORK_V4_PREFIX | cut -d'.' -f3)
    local NEW_OCTET_2=$(echo $WG_NETWORK_V4_PREFIX | cut -d'.' -f2)
    local WG_NETWORK_V6=""
    if [[ "$SERVER_HAS_PUBLIC_IPV6" == "true" ]]; then
        WG_NETWORK_V6="fd42:42:$(printf '%x' $NEW_OCTET_2):$(printf '%x' $NEW_OCTET_3)::"
        SERVER_ADDRESS_LINE+=", ${WG_NETWORK_V6}1/64"
        POST_UP_CMDS+="; ip6tables -A FORWARD -i %i -j ACCEPT --wait 10; ip6tables -t nat -A POSTROUTING -o $DEFAULT_INTERFACE -j MASQUERADE --wait 10"
        POST_DOWN_CMDS+="; ip6tables -D FORWARD -i %i -j ACCEPT --wait 10; ip6tables -t nat -D POSTROUTING -o $DEFAULT_INTERFACE -j MASQUERADE --wait 10"
    fi

    echo -e "\nüöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '$CONFIG_NAME'..."
    sudo mkdir -p "$CONFIG_DIR"; sudo chmod 700 "$CONFIG_DIR"
    
    SERVER_PRIVATE=$(wg genkey); SERVER_PUBLIC=$(echo "$SERVER_PRIVATE" | wg pubkey)
    declare -a CLIENT_PRIVATE_KEYS; declare -a CLIENT_PUBLIC_KEYS; declare -a CLIENT_PSKS
    for i in $(seq 1 $CLIENT_COUNT); do
        CLIENT_PRIVATE_KEYS[$i]=$(wg genkey); CLIENT_PUBLIC_KEYS[$i]=$(echo "${CLIENT_PRIVATE_KEYS[$i]}" | wg pubkey); CLIENT_PSKS[$i]=$(wg genpsk)
    done
    
    SERVER_CONFIG_FILE_NAME="${WG_INTERFACE}.conf"
    sudo tee "$CONFIG_DIR/$SERVER_CONFIG_FILE_NAME" > /dev/null << EOF
# $CONFIG_NAME (Mode 1)
[Interface]
PrivateKey = $SERVER_PRIVATE
$SERVER_ADDRESS_LINE
ListenPort = $LISTEN_PORT
$POST_UP_CMDS
$POST_DOWN_CMDS
EOF
    for i in $(seq 1 $CLIENT_COUNT); do
        local CLIENT_IP_V4="${WG_NETWORK_V4_PREFIX}.$((i + 1))"
        local CLIENT_ALLOWED_IPS="AllowedIPs = ${CLIENT_IP_V4}/32"
        if [[ "$SERVER_HAS_PUBLIC_IPV6" == "true" ]]; then
            local CLIENT_IP_V6="${WG_NETWORK_V6}$((i + 1))"
            CLIENT_ALLOWED_IPS+=", ${CLIENT_IP_V6}/128"
        fi
        
        sudo tee -a "$CONFIG_DIR/$SERVER_CONFIG_FILE_NAME" > /dev/null << EOF

# Peer: Client $i
[Peer]
PublicKey = ${CLIENT_PUBLIC_KEYS[$i]}
PresharedKey = ${CLIENT_PSKS[$i]}
$CLIENT_ALLOWED_IPS
EOF
    done
    
    for i in $(seq 1 $CLIENT_COUNT); do
        local CLIENT_IP_V4="${WG_NETWORK_V4_PREFIX}.$((i + 1))"
        local CLIENT_ADDRESS_LINE="Address = ${CLIENT_IP_V4}/24"
        if [[ "$SERVER_HAS_PUBLIC_IPV6" == "true" ]]; then
            local CLIENT_IP_V6="${WG_NETWORK_V6}$((i + 1))"
            CLIENT_ADDRESS_LINE+=", ${CLIENT_IP_V6}/64"
        fi
        local CLIENT_FILE=$([ $i -eq 1 ] && echo "client.conf" || echo "client${i}.conf")
        
        {
            echo "# Client $i for $CONFIG_NAME"
            echo "[Interface]"
            echo "PrivateKey = ${CLIENT_PRIVATE_KEYS[$i]}"
            echo "$CLIENT_ADDRESS_LINE"
            if [ -n "$DNS_SETTINGS" ]; then echo "$DNS_SETTINGS"; fi
            if [ -n "$OBFUSCATION_SETTINGS" ]; then printf "%s\n" "$OBFUSCATION_SETTINGS"; fi
            
            echo ""
            echo "[Peer]"
            echo "PublicKey = $SERVER_PUBLIC"
            echo "PresharedKey = ${CLIENT_PSKS[$i]}"
            echo "Endpoint = $SERVER_IP:$LISTEN_PORT"
            echo "AllowedIPs = 0.0.0.0/0, ::/0"
            echo "PersistentKeepalive = 25"
        } | sudo tee "$CONFIG_DIR/$CLIENT_FILE" > /dev/null
    done
    
    sudo chmod 600 "$CONFIG_DIR"/*; sudo ln -sf "$CONFIG_DIR/$SERVER_CONFIG_FILE_NAME" "/etc/wireguard/$SERVER_CONFIG_FILE_NAME"
    sudo sysctl -w net.ipv4.ip_forward=1 > /dev/null
    if [[ "$SERVER_HAS_PUBLIC_IPV6" == "true" ]]; then
        sudo sysctl -w net.ipv6.conf.all.forwarding=1 > /dev/null
    fi
    sudo systemctl enable --now "wg-quick@${WG_INTERFACE}"
    
    if verify_tunnel_activation "$WG_INTERFACE"; then
        clear
        show_summary_for_config "$CONFIG_NAME"
        export_configs "$CONFIG_NAME"
    fi
}

# --- –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø: –†–ï–ñ–ò–ú 2 ---
run_creation_flow_mode2() {
    local CONFIG_NAME=$1; local CONFIG_DIR="/etc/wireguard/$CONFIG_NAME"; local WG_INTERFACE="wg-$CONFIG_NAME"
    
    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true)
    local active_mode2_config=""
    for conf in "${all_configs[@]}"; do
        if is_config_truly_active "$conf"; then
            local conf_file
            conf_file=$(sudo find "/etc/wireguard/$conf" -name "wg-*.conf" -print -quit 2>/dev/null)
            if [ -f "$conf_file" ] && sudo grep -q "(Mode 2)" "$conf_file"; then
                active_mode2_config=$conf
                break
            fi
        fi
    done
    
    if [ -n "$active_mode2_config" ]; then
        echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ —Ä–µ–∂–∏–º–µ 2 - '$active_mode2_config'"
        read -p "‚ùì –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å '$active_mode2_config', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é? (1 - –¥–∞, 2 - –Ω–µ—Ç): " choice
        if [[ "$choice" == "1" ]]; then
            deep_clean_config "$active_mode2_config"; sudo systemctl daemon-reload; sudo systemctl reset-failed
        else
            echo "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."; return 1
        fi
    fi

    if ip link show "$WG_INTERFACE" &>/dev/null; then echo "‚ùå –û—à–∏–±–∫–∞: –°–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å '$WG_INTERFACE' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."; return 1; fi

    DEFAULT_INTERFACE=$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)
    if [ -z "$DEFAULT_INTERFACE" ]; then echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."; return 1; fi
    DEFAULT_GATEWAY=$(ip -4 route ls | grep default | grep -Po '(?<=via )(\S+)' | head -1)
    if [ -z "$DEFAULT_GATEWAY" ]; then echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–ª—é–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."; return 1; fi
    
    SERVER_IP=$(get_server_public_ip)
    if [ "$SERVER_IP" == "error" ]; then echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞."; return 1; fi
    
    local max_port=58799; local max_table_id=100
    if [ -d "/etc/wireguard" ]; then
        for dir in /etc/wireguard/*/ ; do
            if [ -d "$dir" ] && [ "$dir" != "$CONFIG_DIR/" ]; then
                config_file=$(sudo find "$dir" -name "wg-*.conf" -print -quit 2>/dev/null); if [ -f "$config_file" ]; then
                    port=$(sudo grep -oP 'ListenPort\s*=\s*\K[0-9]+' "$config_file" | head -n 1 || echo "0"); if [[ "$port" -gt "$max_port" ]]; then max_port=$port; fi
                    table_id=$(sudo grep -oP 'table\s+\K[0-9]+' "$config_file" | head -n 1 || echo "0"); if [[ "$table_id" -gt "$max_table_id" ]]; then max_table_id=$table_id; fi
                fi
            fi
        done
    fi
    local NEW_TABLE_ID=$((max_table_id + 1))
    
    local LISTEN_PORT
    local SUGGESTED_PORT=$((max_port + 1))
    echo
    while true; do
        read -p "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç (–Ω–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '$SUGGESTED_PORT'): " user_port
        LISTEN_PORT=${user_port:-$SUGGESTED_PORT}
        if ! [[ "$LISTEN_PORT" =~ ^[0-9]+$ ]] || [ "$LISTEN_PORT" -lt 1024 ] || [ "$LISTEN_PORT" -gt 65535 ]; then
            echo "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ (1024-65535)."
            continue
        fi
        if sudo grep -qR --include='wg-*.conf' "^\s*ListenPort\s*=\s*$LISTEN_PORT\s*$" /etc/wireguard/ 2>/dev/null; then
            local conflicting_config
            conflicting_config=$(sudo grep -lR --include='wg-*.conf' "^\s*ListenPort\s*=\s*$LISTEN_PORT\s*$" /etc/wireguard/ | head -n 1 | xargs dirname | xargs basename)
            echo "‚ùå –û—à–∏–±–∫–∞! –ü–æ—Ä—Ç $LISTEN_PORT —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π '$conflicting_config'."
            continue
        fi
        break
    done

    local WG_SUBNET_V4; get_wg_network WG_SUBNET_V4
    if [ -z "$WG_SUBNET_V4" ]; then echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Å–µ—Ç—å –¥–ª—è WireGuard."; return 1; fi
    local WG_NETWORK_PREFIX; WG_NETWORK_PREFIX=$(echo "$WG_SUBNET_V4" | cut -d'.' -f1-3)
    
    local ROUTER_COUNT;
    echo
    while true; do read -p "‚ùì –°–∫–æ–ª—å–∫–æ üì° —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è '$CONFIG_NAME'? (1-100): " ROUTER_COUNT
        if [[ "$ROUTER_COUNT" =~ ^[0-9]+$ ]] && [ "$ROUTER_COUNT" -ge 1 ] && [ "$ROUTER_COUNT" -le 100 ]; then break; else echo "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100."; fi
    done
    
    declare -a ROUTER_LAN_SUBNETS
    local chosen_lan_subnets=()
    for i in $(seq 1 $ROUTER_COUNT); do
        local new_subnet
        get_router_lan_subnet new_subnet "$i" "$WG_SUBNET_V4" "${chosen_lan_subnets[@]}"
        if [ -z "$new_subnet" ]; then echo "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Å–µ—Ç–∏."; return 1; fi
        ROUTER_LAN_SUBNETS[$i]="$new_subnet"
        chosen_lan_subnets+=("$new_subnet")
    done
    
    local GATEWAY_ROUTER_NUM=1
    if [ "$ROUTER_COUNT" -gt 1 ]; then
        echo
        while true; do
            read -p "‚ùì –ö–∞–∫–æ–π —Ä–æ—É—Ç–µ—Ä –±—É–¥–µ—Ç —à–ª—é–∑–æ–º –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç? (1-${ROUTER_COUNT}): " user_choice
            if [[ "$user_choice" =~ ^[0-9]+$ ]] && [ "$user_choice" -ge 1 ] && [ "$user_choice" -le $ROUTER_COUNT ]; then
                GATEWAY_ROUTER_NUM=$user_choice; break
            else
                echo "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${ROUTER_COUNT}."; fi
        done
    fi
    
    local CLIENT_COUNT
    while true; do echo; read -p "‚ùì –°–∫–æ–ª—å–∫–æ üì± –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è '$CONFIG_NAME'? (1-100): " CLIENT_COUNT
        if [[ "$CLIENT_COUNT" =~ ^[0-9]+$ ]] && [ "$CLIENT_COUNT" -ge 1 ] && [ "$CLIENT_COUNT" -le 100 ]; then break; else echo "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100."; fi
    done
    
    local DNS_SETTINGS; get_dns_settings DNS_SETTINGS "$SERVER_HAS_PUBLIC_IPV6"
    local OBFUSCATION_SETTINGS; get_obfuscation_settings OBFUSCATION_SETTINGS

    echo -e "\nüöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '$CONFIG_NAME'..."
    sudo mkdir -p "$CONFIG_DIR"; sudo chmod 700 "$CONFIG_DIR"

    SERVER_PRIVATE=$(wg genkey); SERVER_PUBLIC=$(echo "$SERVER_PRIVATE" | wg pubkey); 
    declare -a ROUTER_PRIVKEYS; declare -a ROUTER_PUBKEYS; declare -a ROUTER_PSKS
    for i in $(seq 1 $ROUTER_COUNT); do ROUTER_PRIVKEYS[$i]=$(wg genkey); ROUTER_PUBKEYS[$i]=$(echo "${ROUTER_PRIVKEYS[$i]}" | wg pubkey); ROUTER_PSKS[$i]=$(wg genpsk); done
    
    declare -a CLIENT_PRIVKEYS; declare -a CLIENT_PUBKEYS; declare -a CLIENT_PSKS
    for i in $(seq 1 $CLIENT_COUNT); do CLIENT_PRIVKEYS[$i]=$(wg genkey); CLIENT_PUBKEYS[$i]=$(echo "${CLIENT_PRIVKEYS[$i]}" | wg pubkey); CLIENT_PSKS[$i]=$(wg genpsk); done
    
    local SERVER_WG_IP="${WG_NETWORK_PREFIX}.1"
    
    POST_UP="iptables -A INPUT -p udp --dport $LISTEN_PORT -j ACCEPT --wait 10; iptables -A FORWARD -i %i -j ACCEPT --wait 10; iptables -t nat -A POSTROUTING -o $DEFAULT_INTERFACE -j MASQUERADE --wait 10; ip route add default dev $DEFAULT_INTERFACE via $DEFAULT_GATEWAY table $NEW_TABLE_ID ; ip rule add from $SERVER_IP table $NEW_TABLE_ID"
    POST_DOWN="iptables -D INPUT -p udp --dport $LISTEN_PORT -j ACCEPT --wait 10; iptables -D FORWARD -i %i -j ACCEPT --wait 10; iptables -t nat -D POSTROUTING -o $DEFAULT_INTERFACE -j MASQUERADE --wait 10; ip rule delete from $SERVER_IP table $NEW_TABLE_ID ; ip route flush table $NEW_TABLE_ID"

    SERVER_CONFIG_FILE_NAME="${WG_INTERFACE}.conf"
    sudo tee "$CONFIG_DIR/$SERVER_CONFIG_FILE_NAME" > /dev/null << EOF
# $CONFIG_NAME (Mode 2)
# Routing Table: $NEW_TABLE_ID
[Interface]
PrivateKey = $SERVER_PRIVATE
Address = $SERVER_WG_IP/24
ListenPort = $LISTEN_PORT
PostUp = $POST_UP
PostDown = $POST_DOWN
EOF

    local ip_counter=2
    for i in $(seq 1 $ROUTER_COUNT); do
        local ROUTER_WG_IP="${WG_NETWORK_PREFIX}.$ip_counter"
        local ALLOWED_IPS="$ROUTER_WG_IP/32, ${ROUTER_LAN_SUBNETS[$i]}"
        if [ "$i" -eq "$GATEWAY_ROUTER_NUM" ]; then
            ALLOWED_IPS+=", 0.0.0.0/0, ::/0"
        fi
        
        sudo tee -a "$CONFIG_DIR/$SERVER_CONFIG_FILE_NAME" > /dev/null << EOF

# Peer: Router $i (LAN: ${ROUTER_LAN_SUBNETS[$i]})
[Peer]
PublicKey = ${ROUTER_PUBKEYS[$i]}
PresharedKey = ${ROUTER_PSKS[$i]}
AllowedIPs = $ALLOWED_IPS
PersistentKeepalive = 25
EOF
        ip_counter=$((ip_counter + 1))
    done

    for i in $(seq 1 $CLIENT_COUNT); do
        local CLIENT_WG_IP="${WG_NETWORK_PREFIX}.$ip_counter"
        sudo tee -a "$CONFIG_DIR/$SERVER_CONFIG_FILE_NAME" > /dev/null << EOF

# Peer: Client $i
[Peer]
PublicKey = ${CLIENT_PUBKEYS[$i]}
PresharedKey = ${CLIENT_PSKS[$i]}
AllowedIPs = $CLIENT_WG_IP/32
PersistentKeepalive = 25
EOF
        ip_counter=$((ip_counter + 1))
    done
    
    ip_counter=2
    for i in $(seq 1 $ROUTER_COUNT); do
        local ROUTER_WG_IP="${WG_NETWORK_PREFIX}.$ip_counter"
        local ROUTER_FILE_NAME=$([ $i -eq 1 ] && echo "router.conf" || echo "router${i}.conf")
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: AllowedIPs –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ 2
        local router_file_allowed_ips="${WG_NETWORK_PREFIX}.0/24, 0.0.0.0/0, ::/0"
        
        {
            echo "# Router $i for $CONFIG_NAME (LAN: ${ROUTER_LAN_SUBNETS[$i]})"
            echo "[Interface]"
            echo "PrivateKey = ${ROUTER_PRIVKEYS[$i]}"
            echo "Address = $ROUTER_WG_IP/24"
            if [ -n "$OBFUSCATION_SETTINGS" ]; then printf "%s\n" "$OBFUSCATION_SETTINGS"; fi
            
            echo ""
            echo "[Peer]"
            echo "PublicKey = $SERVER_PUBLIC"
            echo "PresharedKey = ${ROUTER_PSKS[$i]}"
            echo "Endpoint = $SERVER_IP:$LISTEN_PORT"
            echo "AllowedIPs = $router_file_allowed_ips"
            echo "PersistentKeepalive = 25"
        } | sudo tee "$CONFIG_DIR/$ROUTER_FILE_NAME" > /dev/null

        ip_counter=$((ip_counter + 1))
    done
    
    for i in $(seq 1 $CLIENT_COUNT); do
        local CLIENT_WG_IP="${WG_NETWORK_PREFIX}.$ip_counter"
        local CLIENT_FILE_NAME=$([ $i -eq 1 ] && echo "client.conf" || echo "client${i}.conf")
        
        {
            echo "# Client $i for $CONFIG_NAME"
            echo "[Interface]"
            echo "PrivateKey = ${CLIENT_PRIVKEYS[$i]}"
            echo "Address = $CLIENT_WG_IP/24"
            if [ -n "$DNS_SETTINGS" ]; then echo "$DNS_SETTINGS"; fi
            if [ -n "$OBFUSCATION_SETTINGS" ]; then printf "%s\n" "$OBFUSCATION_SETTINGS"; fi
            
            echo ""
            echo "[Peer]"
            echo "PublicKey = $SERVER_PUBLIC"
            echo "PresharedKey = ${CLIENT_PSKS[$i]}"
            echo "Endpoint = $SERVER_IP:$LISTEN_PORT"
            echo "AllowedIPs = 0.0.0.0/0, ::/0"
            echo "PersistentKeepalive = 25"
        } | sudo tee "$CONFIG_DIR/$CLIENT_FILE_NAME" > /dev/null

        ip_counter=$((ip_counter + 1))
    done
    
    sudo chmod 600 "$CONFIG_DIR"/*; sudo ln -sf "$CONFIG_DIR/$SERVER_CONFIG_FILE_NAME" "/etc/wireguard/$SERVER_CONFIG_FILE_NAME"
    sudo sysctl -w net.ipv4.ip_forward=1 > /dev/null; sudo systemctl enable --now "wg-quick@${WG_INTERFACE}"
    
    if verify_tunnel_activation "$WG_INTERFACE"; then
        clear
        show_summary_for_config "$CONFIG_NAME"
        export_configs "$CONFIG_NAME"
    fi
}

# --- –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø: –†–ï–ñ–ò–ú 3 ---
run_creation_flow_mode3() {
    local CONFIG_NAME=$1; local CONFIG_DIR="/etc/wireguard/$CONFIG_NAME"; local WG_INTERFACE="wg-$CONFIG_NAME"
    
    if ip link show "$WG_INTERFACE" &>/dev/null; then echo "‚ùå –û—à–∏–±–∫–∞: –°–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å '$WG_INTERFACE' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."; return 1; fi
    
    SERVER_IP=$(get_server_public_ip)
    if [ "$SERVER_IP" == "error" ]; then echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞."; return 1; fi
    
    local max_port=58799
    if [ -d "/etc/wireguard" ]; then
        for dir in /etc/wireguard/*/ ; do
            if [ -d "$dir" ] && [ "$dir" != "$CONFIG_DIR/" ]; then
                config_file=$(sudo find "$dir" -name "wg-*.conf" -print -quit 2>/dev/null); if [ -f "$config_file" ]; then
                    port=$(sudo grep -oP 'ListenPort\s*=\s*\K[0-9]+' "$config_file" | head -n 1 || echo "0"); if [[ "$port" -gt "$max_port" ]]; then max_port=$port; fi
                fi
            fi
        done
    fi
    
    local LISTEN_PORT
    local SUGGESTED_PORT=$((max_port + 1))
    echo
    while true; do
        read -p "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç (–Ω–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '$SUGGESTED_PORT'): " user_port
        LISTEN_PORT=${user_port:-$SUGGESTED_PORT}
        if ! [[ "$LISTEN_PORT" =~ ^[0-9]+$ ]] || [ "$LISTEN_PORT" -lt 1024 ] || [ "$LISTEN_PORT" -gt 65535 ]; then
            echo "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ (1024-65535)."; continue
        fi
        if sudo grep -qR --include='wg-*.conf' "^\s*ListenPort\s*=\s*$LISTEN_PORT\s*$" /etc/wireguard/ 2>/dev/null; then
            local conflicting_config=$(sudo grep -lR --include='wg-*.conf' "^\s*ListenPort\s*=\s*$LISTEN_PORT\s*$" /etc/wireguard/ | head -n 1 | xargs dirname | xargs basename)
            echo "‚ùå –û—à–∏–±–∫–∞! –ü–æ—Ä—Ç $LISTEN_PORT —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π '$conflicting_config'."; continue
        fi
        break
    done
    
    local WG_SUBNET_V4; get_wg_network WG_SUBNET_V4
    if [ -z "$WG_SUBNET_V4" ]; then echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Å–µ—Ç—å –¥–ª—è WireGuard."; return 1; fi
    local WG_NETWORK_V4_PREFIX; WG_NETWORK_V4_PREFIX=$(echo "$WG_SUBNET_V4" | cut -d'.' -f1-3)

    local ROUTER_COUNT;
    echo
    while true; do read -p "‚ùì –°–∫–æ–ª—å–∫–æ üì° —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è '$CONFIG_NAME'? (0-253): " ROUTER_COUNT
        if [[ "$ROUTER_COUNT" =~ ^[0-9]+$ ]] && [ "$ROUTER_COUNT" -ge 0 ] && [ "$ROUTER_COUNT" -le 253 ]; then break; else echo "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 253."; fi
    done
    
    declare -a ROUTER_LAN_SUBNETS
    local chosen_lan_subnets=()
    if [ "$ROUTER_COUNT" -gt 0 ]; then
        for i in $(seq 1 $ROUTER_COUNT); do
            local new_subnet
            get_router_lan_subnet new_subnet "$i" "$WG_SUBNET_V4" "${chosen_lan_subnets[@]}"
            if [ -z "$new_subnet" ]; then echo "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Å–µ—Ç–∏."; return 1; fi
            ROUTER_LAN_SUBNETS[$i]="$new_subnet"
            chosen_lan_subnets+=("$new_subnet")
        done
    fi
    
    local CLIENT_COUNT
    echo
    while true; do read -p "‚ùì –°–∫–æ–ª—å–∫–æ üì± –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è '$CONFIG_NAME'? (0-253): " CLIENT_COUNT
        if [[ "$CLIENT_COUNT" =~ ^[0-9]+$ ]] && [ "$CLIENT_COUNT" -ge 0 ] && [ "$CLIENT_COUNT" -le 253 ]; then break; else echo "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 253."; fi
    done

    if [ $((ROUTER_COUNT + CLIENT_COUNT)) -gt 253 ] || [ $((ROUTER_COUNT + CLIENT_COUNT)) -eq 0 ]; then
        echo "‚ùå –û—à–∏–±–∫–∞! –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 253."; return 1
    fi

    local DNS_SETTINGS; get_dns_settings DNS_SETTINGS "$SERVER_HAS_PUBLIC_IPV6"
    local OBFUSCATION_SETTINGS; get_obfuscation_settings OBFUSCATION_SETTINGS

    local client_allowed_ips
    client_allowed_ips=$(generate_client_allowed_ips_string "$WG_SUBNET_V4" "${ROUTER_LAN_SUBNETS[@]}")

    local SERVER_ADDRESS_LINE="Address = ${WG_NETWORK_V4_PREFIX}.1/24"
    
    local NEW_OCTET_3=$(echo $WG_NETWORK_V4_PREFIX | cut -d'.' -f3)
    local NEW_OCTET_2=$(echo $WG_NETWORK_V4_PREFIX | cut -d'.' -f2)
    local WG_NETWORK_V6=""
    if [[ "$SERVER_HAS_PUBLIC_IPV6" == "true" ]]; then
        WG_NETWORK_V6="fd42:42:$(printf '%x' $NEW_OCTET_2):$(printf '%x' $NEW_OCTET_3)::"
        SERVER_ADDRESS_LINE+=", ${WG_NETWORK_V6}1/64"
    fi
    
    echo -e "\nüöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '$CONFIG_NAME'..."
    
    sudo mkdir -p "$CONFIG_DIR"; sudo chmod 700 "$CONFIG_DIR"
    
    SERVER_PRIVATE=$(wg genkey); SERVER_PUBLIC=$(echo "$SERVER_PRIVATE" | wg pubkey)
    
    declare -a ROUTER_PRIVATE_KEYS; declare -a ROUTER_PUBLIC_KEYS; declare -a ROUTER_PSKS
    if [ "$ROUTER_COUNT" -gt 0 ]; then
      for i in $(seq 1 $ROUTER_COUNT); do ROUTER_PRIVATE_KEYS[$i]=$(wg genkey); ROUTER_PUBLIC_KEYS[$i]=$(echo "${ROUTER_PRIVATE_KEYS[$i]}" | wg pubkey); ROUTER_PSKS[$i]=$(wg genpsk); done
    fi

    declare -a CLIENT_PRIVATE_KEYS; declare -a CLIENT_PUBLIC_KEYS; declare -a CLIENT_PSKS
    if [ "$CLIENT_COUNT" -gt 0 ]; then
      for i in $(seq 1 $CLIENT_COUNT); do CLIENT_PRIVATE_KEYS[$i]=$(wg genkey); CLIENT_PUBLIC_KEYS[$i]=$(echo "${CLIENT_PRIVATE_KEYS[$i]}" | wg pubkey); CLIENT_PSKS[$i]=$(wg genpsk); done
    fi
    
    SERVER_CONFIG_FILE_NAME="${WG_INTERFACE}.conf"
    sudo tee "$CONFIG_DIR/$SERVER_CONFIG_FILE_NAME" > /dev/null << EOF
# $CONFIG_NAME (Mode 3)
[Interface]
PrivateKey = $SERVER_PRIVATE
$SERVER_ADDRESS_LINE
ListenPort = $LISTEN_PORT
EOF
    
    local ip_counter=2
    if [ "$ROUTER_COUNT" -gt 0 ]; then
      for i in $(seq 1 $ROUTER_COUNT); do
          local ROUTER_IP_V4="${WG_NETWORK_V4_PREFIX}.$ip_counter"
          local PEER_ALLOWED_IPS="AllowedIPs = ${ROUTER_IP_V4}/32, ${ROUTER_LAN_SUBNETS[$i]}"
          if [[ "$SERVER_HAS_PUBLIC_IPV6" == "true" ]]; then
              PEER_ALLOWED_IPS+=", ${WG_NETWORK_V6}$ip_counter/128"
          fi

          sudo tee -a "$CONFIG_DIR/$SERVER_CONFIG_FILE_NAME" > /dev/null << EOF

# Peer: Router $i (LAN: ${ROUTER_LAN_SUBNETS[$i]})
[Peer]
PublicKey = ${ROUTER_PUBLIC_KEYS[$i]}
PresharedKey = ${ROUTER_PSKS[$i]}
$PEER_ALLOWED_IPS
EOF
          ip_counter=$((ip_counter + 1))
      done
    fi
    
    if [ "$CLIENT_COUNT" -gt 0 ]; then
      for i in $(seq 1 $CLIENT_COUNT); do
          local CLIENT_IP_V4="${WG_NETWORK_V4_PREFIX}.$ip_counter"
          local PEER_ALLOWED_IPS="AllowedIPs = ${CLIENT_IP_V4}/32"
          if [[ "$SERVER_HAS_PUBLIC_IPV6" == "true" ]]; then
              PEER_ALLOWED_IPS+=", ${WG_NETWORK_V6}$ip_counter/128"
          fi

          sudo tee -a "$CONFIG_DIR/$SERVER_CONFIG_FILE_NAME" > /dev/null << EOF

# Peer: Client $i
[Peer]
PublicKey = ${CLIENT_PUBLIC_KEYS[$i]}
PresharedKey = ${CLIENT_PSKS[$i]}
$PEER_ALLOWED_IPS
EOF
          ip_counter=$((ip_counter + 1))
      done
    fi
    
    ip_counter=2
    if [ "$ROUTER_COUNT" -gt 0 ]; then
      for i in $(seq 1 $ROUTER_COUNT); do
          local ROUTER_IP_V4="${WG_NETWORK_V4_PREFIX}.$ip_counter"
          local PEER_ADDRESS_LINE="Address = ${ROUTER_IP_V4}/24"
          if [[ "$SERVER_HAS_PUBLIC_IPV6" == "true" ]]; then
              PEER_ADDRESS_LINE+=", ${WG_NETWORK_V6}$ip_counter/64"
          fi
          local ROUTER_FILE=$([ $i -eq 1 ] && echo "router.conf" || echo "router${i}.conf")
          # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: AllowedIPs –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ 3 —Ç–µ–ø–µ—Ä—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã
          local individual_router_allowed_ips="${WG_NETWORK_V4_PREFIX}.0/24, ${ROUTER_LAN_SUBNETS[$i]}"

          {
              echo "# Router $i for $CONFIG_NAME (LAN)"
              echo "[Interface]"
              echo "PrivateKey = ${ROUTER_PRIVATE_KEYS[$i]}"
              echo "$PEER_ADDRESS_LINE"
              if [ -n "$OBFUSCATION_SETTINGS" ]; then printf "%s\n" "$OBFUSCATION_SETTINGS"; fi

              echo ""
              echo "[Peer]"
              echo "PublicKey = $SERVER_PUBLIC"
              echo "PresharedKey = ${ROUTER_PSKS[$i]}"
              echo "Endpoint = $SERVER_IP:$LISTEN_PORT"
              echo "AllowedIPs = $individual_router_allowed_ips"
              echo "PersistentKeepalive = 25"
          } | sudo tee "$CONFIG_DIR/$ROUTER_FILE" > /dev/null

          ip_counter=$((ip_counter + 1))
      done
    fi

    if [ "$CLIENT_COUNT" -gt 0 ]; then
      for i in $(seq 1 $CLIENT_COUNT); do
          local CLIENT_IP_V4="${WG_NETWORK_V4_PREFIX}.$ip_counter"
          local PEER_ADDRESS_LINE="Address = ${CLIENT_IP_V4}/24"
          if [[ "$SERVER_HAS_PUBLIC_IPV6" == "true" ]]; then
              PEER_ADDRESS_LINE+=", ${WG_NETWORK_V6}$ip_counter/64"
          fi
          
          local CLIENT_FILE_NAME
          if [ $i -eq 1 ]; then
              CLIENT_FILE_NAME="client.conf"
          else
              CLIENT_FILE_NAME="client${i}.conf"
          fi

          {
              echo "# Client $i for $CONFIG_NAME (LAN)"
              echo "[Interface]"
              echo "PrivateKey = ${CLIENT_PRIVATE_KEYS[$i]}"
              echo "$PEER_ADDRESS_LINE"
              if [ -n "$DNS_SETTINGS" ]; then echo "$DNS_SETTINGS"; fi
              if [ -n "$OBFUSCATION_SETTINGS" ]; then printf "%s\n" "$OBFUSCATION_SETTINGS"; fi
              
              echo ""
              echo "[Peer]"
              echo "PublicKey = $SERVER_PUBLIC"
              echo "PresharedKey = ${CLIENT_PSKS[$i]}"
              echo "Endpoint = $SERVER_IP:$LISTEN_PORT"
              echo "AllowedIPs = $client_allowed_ips"
              echo "PersistentKeepalive = 25"
          } | sudo tee "$CONFIG_DIR/$CLIENT_FILE_NAME" > /dev/null
          
          ip_counter=$((ip_counter + 1))
      done
    fi

    sudo chmod 600 "$CONFIG_DIR"/*; sudo ln -sf "$CONFIG_DIR/$SERVER_CONFIG_FILE_NAME" "/etc/wireguard/$SERVER_CONFIG_FILE_NAME"
    sudo sysctl -w net.ipv4.ip_forward=1 > /dev/null
    if [[ "$SERVER_HAS_PUBLIC_IPV6" == "true" ]]; then
        sudo sysctl -w net.ipv6.conf.all.forwarding=1 > /dev/null
    fi
    sudo systemctl enable --now "wg-quick@${WG_INTERFACE}"
    
    if verify_tunnel_activation "$WG_INTERFACE"; then
        clear
        show_summary_for_config "$CONFIG_NAME"
        export_configs "$CONFIG_NAME"
    fi
}

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
create_config() {
    clear
    local choice
    
    while true; do
        echo "üîé –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ö–µ–º—É –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo
        echo "1. üë• –ö–ª–∏–µ–Ω—Ç—ã ‚ÆÇ ‚òÅÔ∏è  –°–µ—Ä–≤–µ—Ä ‚ÆÇ üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç"
        echo "   –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä."
        echo
        echo "2. üë• –ö–ª–∏–µ–Ω—Ç—ã ‚ÆÇ ‚òÅÔ∏è  –°–µ—Ä–≤–µ—Ä ‚ÆÇ üì° –†–æ—É—Ç–µ—Ä(—ã) ‚ÆÇ üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç + üè† LAN"
        echo "   –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —á–µ—Ä–µ–∑ –æ–¥–∏–Ω —Ä–æ—É—Ç–µ—Ä –∏ –¥–æ—Å—Ç—É–ø—É –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤."
        echo
        echo "3. üë• –ö–ª–∏–µ–Ω—Ç—ã ‚ÆÇ ‚òÅÔ∏è  –°–µ—Ä–≤–µ—Ä ‚ÆÇ üì° –†–æ—É—Ç–µ—Ä(—ã) ‚ÆÇ üè† LAN"
        echo "   –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤."
        echo
        echo "4. –ù–∞–∑–∞–¥"
        echo
        read -p "-> " choice
        case $choice in
            1 | 2 | 3) break ;;
            4) echo; return ;;
            *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"; echo;;
        esac
    done

    echo
    local CONFIG_NAME
    while true; do
        read -p "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã): " CONFIG_NAME
        if [[ ! "$CONFIG_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then 
            echo "‚ùå –û—à–∏–±–∫–∞! –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ a-z, A-Z, 0-9, _ –∏–ª–∏ -"
            continue
        fi
        if [ -d "/etc/wireguard/$CONFIG_NAME" ]; then 
            echo "‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '$CONFIG_NAME' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è."
            continue
        fi
        if [ -z "$CONFIG_NAME" ]; then
            echo "‚ùå –û—à–∏–±–∫–∞! –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
            continue
        fi
        break
    done
    
    if [ "$choice" -eq 1 ]; then
        run_creation_flow_mode1 "$CONFIG_NAME"
    elif [ "$choice" -eq 2 ]; then
        run_creation_flow_mode2 "$CONFIG_NAME"
    else
        run_creation_flow_mode3 "$CONFIG_NAME"
    fi
}

# --- –û–ë–©–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –û–ß–ò–°–¢–ö–ò ---
apply_deep_clean() {
    local configs_to_process=("$@")
    if [ ${#configs_to_process[@]} -eq 0 ]; then return; fi

    for conf_name in "${configs_to_process[@]}"; do deep_clean_config "$conf_name"; done
    
    echo -e "\nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ systemd..."; sudo systemctl daemon-reload; sudo systemctl reset-failed
    echo "‚úÖ –ì–æ—Ç–æ–≤–æ!"; pause_and_wait
}

# --- –§–£–ù–ö–¶–ò–Ø –û–°–¢–ê–ù–û–í–ö–ò –û–î–ù–û–ô –ò–õ–ò –ù–ï–°–ö–û–õ–¨–ö–ò–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ---
stop_specific_configs() {
    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true | sort)
    local running_configs=(); for conf_name in "${all_configs[@]}"; do if is_config_truly_active "$conf_name"; then running_configs+=("$conf_name"); fi; done
    if [ ${#running_configs[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."; pause_and_wait; return; fi

    echo "‚öôÔ∏è  –†–∞–±–æ—Ç–∞—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
    for i in "${!running_configs[@]}"; do 
        local conf_name="${running_configs[$i]}"
        echo "üü¢ $((i+1)). $conf_name"
    done;
    echo;

    read -p "‚ùì –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ): " -a choices
    if [ ${#choices[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."; return; fi

    echo "‚úÖ –ö–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!";

    local configs_to_stop=()
    for choice in "${choices[@]}"; do
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#running_configs[@]}" ]; then
            configs_to_stop+=("${running_configs[$((choice-1))]}")
        else echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ '$choice'."; fi
    done
    if [ ${#configs_to_stop[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ –≤—ã–±—Ä–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."; return; fi

    echo "‚öôÔ∏è  –í—ã–±—Ä–∞–Ω–æ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${configs_to_stop[*]}"
    for conf_name in "${configs_to_stop[@]}"; do
        sudo systemctl disable --now "wg-quick@wg-$conf_name" &>/dev/null || true
    done;
    pause_and_wait
}

# --- –§–£–ù–ö–¶–ò–Ø –û–°–¢–ê–ù–û–í–ö–ò –í–°–ï–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ---
stop_all_running_configs() {
    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true)
    local running_configs=(); for conf_name in "${all_configs[@]}"; do if is_config_truly_active "$conf_name"; then running_configs+=("$conf_name"); fi; done
    if [ ${#running_configs[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."; pause_and_wait; return; fi

    for conf in "${running_configs[@]}"; do sudo systemctl disable --now "wg-quick@wg-$conf" &>/dev/null || true; done
    echo "‚úÖ –ö–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–æ–ª–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.";
    pause_and_wait
}

# --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –§–£–ù–ö–¶–ò–ô –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è Endpoint —Å–µ—Ä–≤–µ—Ä–∞ (IP:Port) –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ WireGuard
get_server_endpoint() {
    local SERVER_CONFIG_PATH=$1
    local LISTEN_PORT
    LISTEN_PORT=$(sudo grep -oP 'ListenPort\s*=\s*\K[0-9]+' "$SERVER_CONFIG_PATH" 2>/dev/null)
    if [ -z "$LISTEN_PORT" ]; then
        echo "error:no_port"
        return 1
    fi

    local SERVER_IP
    SERVER_IP=$(get_server_public_ip)
    if [ "$SERVER_IP" == "error" ]; then
        echo "error:no_ip"
        return 1
    fi

    echo "$SERVER_IP:$LISTEN_PORT"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–æ–¥—Å–µ—Ç–∏ 192.168.X.0/24
get_next_available_subnet() {
    local SERVER_CONFIG_PATH=$1
    local used_octets

    mapfile -t used_octets < <(sudo grep -oP '192\.168\.\K[0-9]+(?=\.0/24)' "$SERVER_CONFIG_PATH" | sort -n)

    for i in {1..254}; do
        local found=false
        for octet in "${used_octets[@]}"; do
            if [[ "$i" -eq "$octet" ]]; then
                found=true
                break
            fi
        done
        if ! $found; then
            echo "192.168.${i}.0/24"
            return 0
        fi
    done

    echo ""
    return 1
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞ peer –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–µ–π
process_recreate_peer_block_inline() {
    local peer_block="$1"
    local peer_pubkey="$2"
    local PEER_TYPE="$3"
    shift 3
    local all_peer_files=("$@")

    local matching_peer_file=""
    local current_peer_type="client"

    for peer_path in "${all_peer_files[@]}"; do
        local file_privkey
        file_privkey=$(sudo grep -oP 'PrivateKey\s*=\s*\K.*' "$peer_path" 2>/dev/null)
        if [[ -z "$file_privkey" ]]; then continue; fi

        local file_pubkey
        file_pubkey=$(echo "$file_privkey" | wg pubkey 2>/dev/null)

        if [[ "$file_pubkey" == "$peer_pubkey" ]]; then
            matching_peer_file="$peer_path"
            if [[ "$(basename "$peer_path")" == router* ]]; then
                current_peer_type="router"
            fi
            break
        fi
    done

    if [[ ("$current_peer_type" == "$PEER_TYPE" || "$PEER_TYPE" == "all") && -n "$matching_peer_file" ]]; then
        local OLD_PEER_CONFIG
        OLD_PEER_CONFIG=$(sudo cat "$matching_peer_file")

        local PEER_ADDRESS
        PEER_ADDRESS=$(echo "$OLD_PEER_CONFIG" | grep -oP 'Address\s*=\s*\K.*')
        local PEER_ALLOWED_IPS
        PEER_ALLOWED_IPS=$(echo "$OLD_PEER_CONFIG" | grep -oP 'AllowedIPs\s*=\s*\K.*')
        local PEER_DNS
        PEER_DNS=$(echo "$OLD_PEER_CONFIG" | grep -oP 'DNS\s*=\s*\K.*')
        local PEER_OBFS
        PEER_OBFS=$(echo "$OLD_PEER_CONFIG" | grep -E '^(Jc|Jmin|Jmax|S1|S2|H1|H2|H3|H4)\s*=.*')


        local NEW_PEER_PRIVATE NEW_PEER_PUBLIC NEW_PSK
        NEW_PEER_PRIVATE=$(wg genkey)
        NEW_PEER_PUBLIC=$(echo "$NEW_PEER_PRIVATE" | wg pubkey)
        NEW_PSK=$(wg genpsk)

        local peer_comment
        peer_comment=$(echo "$OLD_PEER_CONFIG" | head -n 1)

        local config_name
        config_name=$(basename "$(dirname "$matching_peer_file")")
        local SERVER_CONFIG_PATH
        SERVER_CONFIG_PATH=$(sudo find "/etc/wireguard/$config_name" -name "wg-*.conf" -print -quit 2>/dev/null)
        local SERVER_PRIVATE_KEY
        SERVER_PRIVATE_KEY=$(sudo grep -oP 'PrivateKey\s*=\s*\K.*' "$SERVER_CONFIG_PATH")
        local SERVER_PUBLIC_KEY
        SERVER_PUBLIC_KEY=$(echo "$SERVER_PRIVATE_KEY" | wg pubkey)
        local ENDPOINT
        ENDPOINT=$(get_server_endpoint "$SERVER_CONFIG_PATH")

        {
            echo "$peer_comment"
            echo "[Interface]"
            echo "PrivateKey = $NEW_PEER_PRIVATE"
            echo "Address = $PEER_ADDRESS"
            # DNS –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç
            if [[ -n "$PEER_DNS" && "$current_peer_type" == "client" ]]; then echo "DNS = $PEER_DNS"; fi
            if [ -n "$PEER_OBFS" ]; then echo "$PEER_OBFS"; fi
            echo ""
            echo "[Peer]"
            echo "PublicKey = $SERVER_PUBLIC_KEY"
            echo "PresharedKey = $NEW_PSK"
            echo "Endpoint = $ENDPOINT"
            echo "AllowedIPs = $PEER_ALLOWED_IPS"
            echo "PersistentKeepalive = 25"
        } | sudo tee "$matching_peer_file" > /dev/null


        echo "$peer_block" | while IFS= read -r line; do
            if [[ "$line" =~ ^PublicKey[[:space:]]*=[[:space:]]* ]]; then
                echo "PublicKey = $NEW_PEER_PUBLIC"
            elif [[ "$line" =~ ^PresharedKey[[:space:]]*=[[:space:]]* ]]; then
                echo "PresharedKey = $NEW_PSK"
            else
                echo "$line"
            fi
        done
    else
        echo "$peer_block"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∏—Ä–æ–≤
recreate_peer_keys() {
    local CONFIG_NAME=$1
    local PEER_TYPE=$2
    local CONFIG_DIR="/etc/wireguard/$CONFIG_NAME"
    local WG_INTERFACE="wg-$CONFIG_NAME"
    local SERVER_CONFIG_PATH

    SERVER_CONFIG_PATH=$(sudo find "$CONFIG_DIR" -name "wg-*.conf" -print -quit 2>/dev/null)
    if [ -z "$SERVER_CONFIG_PATH" ]; then echo "‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"; return 1; fi

    echo "üîß –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è ($PEER_TYPE)..."

    local was_active=false
    if sudo wg show "$WG_INTERFACE" &>/dev/null; then
        was_active=true; echo "   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ ${WG_INTERFACE}..."; sudo wg-quick down "$WG_INTERFACE" &>/dev/null
    fi

    local SERVER_PRIVATE_KEY
    SERVER_PRIVATE_KEY=$(sudo grep -oP 'PrivateKey\s*=\s*\K.*' "$SERVER_CONFIG_PATH")
    local SERVER_PUBLIC_KEY
    SERVER_PUBLIC_KEY=$(echo "$SERVER_PRIVATE_KEY" | wg pubkey)

    local ENDPOINT
    ENDPOINT=$(get_server_endpoint "$SERVER_CONFIG_PATH")
    if [[ "$ENDPOINT" == error* ]]; then
        echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Endpoint: $ENDPOINT"
        if $was_active; then sudo wg-quick up "$WG_INTERFACE" &>/dev/null; fi
        return 1
    fi

    local all_peer_files=()
    while IFS= read -r -d '' file; do all_peer_files+=("$file"); done < <(sudo find "$CONFIG_DIR" \( -name "client*.conf" -o -name "router*.conf" \) -type f -print0 2>/dev/null | sort -zV)

    local TEMP_FILE; TEMP_FILE=$(mktemp)

    local in_peer_block=false
    local current_peer_block=""
    local current_peer_pubkey=""

    while IFS= read -r line; do
        if [[ "$line" =~ ^\[Peer\] ]]; then
            if [ "$in_peer_block" = true ] && [ -n "$current_peer_block" ]; then
                process_recreate_peer_block_inline "$current_peer_block" "$current_peer_pubkey" "$PEER_TYPE" "${all_peer_files[@]}" >> "$TEMP_FILE"
            fi
            in_peer_block=true; current_peer_block="$line"; current_peer_pubkey=""
        elif [[ "$line" =~ ^\[Interface\] ]]; then
            if [ "$in_peer_block" = true ] && [ -n "$current_peer_block" ]; then
                process_recreate_peer_block_inline "$current_peer_block" "$current_peer_pubkey" "$PEER_TYPE" "${all_peer_files[@]}" >> "$TEMP_FILE"; current_peer_block=""
            fi
            in_peer_block=false; echo "$line" >> "$TEMP_FILE"
        elif [ "$in_peer_block" = true ]; then
            current_peer_block+=$'\n'"$line"
            if [[ "$line" =~ ^PublicKey[[:space:]]*=[[:space:]]*(.*) ]]; then current_peer_pubkey="${BASH_REMATCH[1]}"; fi
        else
            echo "$line" >> "$TEMP_FILE"
        fi
    done < <(sudo cat "$SERVER_CONFIG_PATH")

    if [ "$in_peer_block" = true ] && [ -n "$current_peer_block" ]; then
        process_recreate_peer_block_inline "$current_peer_block" "$current_peer_pubkey" "$PEER_TYPE" "${all_peer_files[@]}" >> "$TEMP_FILE"
    fi

    local CLEANED_CONFIG; CLEANED_CONFIG=$(mktemp)
    sudo awk 'NF > 0 {if (blanks) print ""; print; blanks=0; next} {blanks=1}' "$TEMP_FILE" > "$CLEANED_CONFIG"
    sudo cp "$CLEANED_CONFIG" "$SERVER_CONFIG_PATH"
    rm "$TEMP_FILE" "$CLEANED_CONFIG"

    if $was_active; then
        echo "   - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ ${WG_INTERFACE}...";
        if sudo wg-quick up "$WG_INTERFACE" &>/dev/null; then
            echo "   - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"; verify_tunnel_activation "$WG_INTERFACE"
        else
            echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
        fi
    fi

    echo "‚úÖ –ö–ª—é—á–∏ –¥–ª—è ($PEER_TYPE) –≤ '$CONFIG_NAME' –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã."; echo "‚ö†Ô∏è  –ù–ï –ó–ê–ë–£–î–¨–¢–ï –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É –≤—Å–µ—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∏—Ä–æ–≤!"
    if command -v pause_and_wait &>/dev/null; then pause_and_wait; fi; return 0
}

# –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
edit_recreate_keys_flow() {
    local CONFIG_NAME=$1; local PEER_TYPE=$2; local type_description=""
    case "$PEER_TYPE" in
        "all")    type_description="–í–°–ï –∫–ª—é—á–∏ –¥–ª—è –í–°–ï–• –ø–∏—Ä–æ–≤" ;;
        "router") type_description="–∫–ª—é—á–∏ –¢–û–õ–¨–ö–û –¥–ª—è —Ä–æ—É—Ç–µ—Ä–æ–≤" ;;
        "client") type_description="–∫–ª—é—á–∏ –¢–û–õ–¨–ö–û –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤" ;;
        *) echo "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∏—Ä–∞ '$PEER_TYPE'"; return 1 ;;
    esac
    echo; echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç $type_description."; echo
    read -p "‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (1 - –¥–∞, 2 - –Ω–µ—Ç): " confirm
    if [[ "$confirm" != "1" ]]; then echo "‚öôÔ∏è  –û—Ç–º–µ–Ω–µ–Ω–æ."; return 1; fi
    recreate_peer_keys "$CONFIG_NAME" "$PEER_TYPE"; return $?
}

# –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Ä–æ—É—Ç–µ—Ä–∞-—à–ª—é–∑–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
edit_change_gateway() {
    local CONFIG_NAME=$1; local CONFIG_DIR="/etc/wireguard/$CONFIG_NAME"; local WG_INTERFACE="wg-$CONFIG_NAME"; local SERVER_CONFIG_PATH
    SERVER_CONFIG_PATH=$(sudo find "$CONFIG_DIR" -name "wg-*.conf" -print -quit 2>/dev/null)
    if [ -z "$SERVER_CONFIG_PATH" ]; then echo "‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"; return 1; fi

    local current_gateway_pubkey; current_gateway_pubkey=$(sudo awk 'BEGIN{RS="\n\n"} /\[Peer\]/ && /0\.0\.0\.0\/0/ { match($0, /PublicKey = ([^\n]+)/, arr); if (arr[1]) print arr[1] }' "$SERVER_CONFIG_PATH" | head -1)

    local router_files=(); while IFS= read -r -d '' file; do router_files+=("$file"); done < <(sudo find "$CONFIG_DIR" -name "router*.conf" -type f -print0 2>/dev/null | sort -zV)
    if [ ${#router_files[@]} -lt 2 ]; then echo "‚öôÔ∏è  –ù–µ—Ç –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞."; if command -v pause_and_wait &>/dev/null; then pause_and_wait; fi; return 1; fi

    echo; echo "üîé –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è '$CONFIG_NAME':"
    for i in "${!router_files[@]}"; do
        local router_path="${router_files[$i]}"; local router_privkey; router_privkey=$(sudo grep -oP 'PrivateKey\s*=\s*\K.*' "$router_path")
        local router_pubkey; router_pubkey=$(echo "$router_privkey" | wg pubkey 2>/dev/null); local router_name; router_name=$(basename "$router_path")
        if [[ "$router_pubkey" == "$current_gateway_pubkey" ]]; then echo "   $((i+1))) $router_name [üåê —Ç–µ–∫—É—â–∏–π —à–ª—é–∑]"; else echo "   $((i+1))) $router_name"; fi
    done; echo

    local choice; read -p "-> " choice
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#router_files[@]}" ]; then echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä."; return 1; fi

    local new_gateway_path="${router_files[$((choice-1))]}"; local new_gateway_privkey; new_gateway_privkey=$(sudo grep -oP 'PrivateKey\s*=\s*\K.*' "$new_gateway_path")
    if [ -z "$new_gateway_privkey" ]; then echo "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Ä–æ—É—Ç–µ—Ä–∞"; return 1; fi

    local new_gateway_pubkey; new_gateway_pubkey=$(echo "$new_gateway_privkey" | wg pubkey)
    if [[ "$new_gateway_pubkey" == "$current_gateway_pubkey" ]]; then echo "‚öôÔ∏è  –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º —à–ª—é–∑–æ–º."; if command -v pause_and_wait &>/dev/null; then pause_and_wait; fi; return 0; fi

    echo "üîß –°–º–µ–Ω–∞ —Ä–æ—É—Ç–µ—Ä–∞ –Ω–∞ $(basename "$new_gateway_path")..."

    local was_active=false
    if sudo wg show "$WG_INTERFACE" &>/dev/null; then was_active=true; echo "   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ ${WG_INTERFACE}..."; sudo wg-quick down "$WG_INTERFACE" &>/dev/null; fi

    sudo sed -i 's/, 0\.0\.0\.0\/0, ::\/0//g; s/0\.0\.0\.0\/0, ::\/0, \?//g; s/, 0\.0\.0\.0\/0//g; s/, ::\/0//g' "$SERVER_CONFIG_PATH"

    local TEMP_FILE; TEMP_FILE=$(mktemp)
    local in_target_peer=false
    while IFS= read -r line; do
        if [[ "$line" =~ ^\[Peer\] ]]; then in_target_peer=false;
        elif [[ "$line" =~ ^PublicKey[[:space:]]*=[[:space:]]*(.+) ]] && [[ "${BASH_REMATCH[1]}" == "$new_gateway_pubkey" ]]; then in_target_peer=true;
        elif [[ "$line" =~ ^AllowedIPs[[:space:]]*=[[:space:]]*(.+) ]] && [[ "$in_target_peer" == true ]]; then
            local allowed_ips="${BASH_REMATCH[1]}"; if [[ ! "$allowed_ips" =~ 0\.0\.0\.0/0 ]]; then line="AllowedIPs = $allowed_ips, 0.0.0.0/0, ::/0"; fi
        fi; echo "$line" >> "$TEMP_FILE"
    done < <(sudo cat "$SERVER_CONFIG_PATH")

    local CLEANED_CONFIG; CLEANED_CONFIG=$(mktemp)
    sudo awk 'NF > 0 {if (blanks) print ""; print; blanks=0; next} {blanks=1}' "$TEMP_FILE" > "$CLEANED_CONFIG"
    sudo cp "$CLEANED_CONFIG" "$SERVER_CONFIG_PATH"; rm "$TEMP_FILE" "$CLEANED_CONFIG"

    if $was_active; then
        echo "   - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ ${WG_INTERFACE}...";
        if sudo wg-quick up "$WG_INTERFACE" &>/dev/null; then echo "   - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"; verify_tunnel_activation "$WG_INTERFACE";
        else echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"; fi
    else echo "   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞. –°–µ—Ä–≤–∏—Å –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º."; fi

    echo "‚úÖ –®–ª—é–∑ –¥–ª—è '$CONFIG_NAME' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω."; if command -v pause_and_wait &>/dev/null; then pause_and_wait; fi; return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∏—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
edit_add_peers() {
    local CONFIG_NAME=$1; local PEER_TYPE=$2; local CONFIG_DIR="/etc/wireguard/$CONFIG_NAME"; local SERVER_CONFIG_PATH
    SERVER_CONFIG_PATH=$(sudo find "$CONFIG_DIR" -name "wg-*.conf" -print -quit 2>/dev/null)
    if [ -z "$SERVER_CONFIG_PATH" ]; then echo "‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"; return 1; fi
    
    local config_mode; config_mode=$(get_config_mode "$CONFIG_NAME")
    local has_ipv6="false"; if sudo grep -q "fd42:42:" "$SERVER_CONFIG_PATH"; then has_ipv6="true"; fi

    local all_peer_files=(); while IFS= read -r -d '' file; do all_peer_files+=("$file"); done < <(sudo find "$CONFIG_DIR" \( -name "client*.conf" -o -name "router*.conf" \) -type f -print0 2>/dev/null)
    local remaining_slots=$((253 - ${#all_peer_files[@]})); if [ "$remaining_slots" -le 0 ]; then echo "‚öôÔ∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–∏—Ä–æ–≤ (253)."; if command -v pause_and_wait &>/dev/null; then pause_and_wait; fi; return 1; fi

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –ø–∏—Ä–æ–≤
    local peer_type_russian
    local peer_type_genitive
    case "$PEER_TYPE" in
        "client")
            peer_type_russian="–∫–ª–∏–µ–Ω—Ç–æ–≤"
            peer_type_genitive="–∫–ª–∏–µ–Ω—Ç–æ–≤"
            ;;
        "router")
            peer_type_russian="—Ä–æ—É—Ç–µ—Ä–æ–≤"
            peer_type_genitive="—Ä–æ—É—Ç–µ—Ä–æ–≤"
            ;;
        *)
            peer_type_russian="${PEER_TYPE}–æ–≤"
            peer_type_genitive="${PEER_TYPE}–æ–≤"
            ;;
    esac

    local new_peer_count; while true; do read -p "‚ùì –°–∫–æ–ª—å–∫–æ –ù–û–í–´–• $peer_type_genitive –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å? (1-$remaining_slots, –∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): " new_peer_count
        if [ -z "$new_peer_count" ]; then echo "‚öôÔ∏è  –û—Ç–º–µ–Ω–∞."; return 1; fi
        if [[ "$new_peer_count" =~ ^[0-9]+$ ]] && [ "$new_peer_count" -ge 1 ] && [ "$new_peer_count" -le "$remaining_slots" ]; then break; else echo "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ $remaining_slots."; fi; done
    
    local DNS_SETTINGS=""; if [[ "$PEER_TYPE" == "client" ]]; then get_dns_settings DNS_SETTINGS "$has_ipv6"; fi
    local OBFUSCATION_SETTINGS=""; get_obfuscation_settings OBFUSCATION_SETTINGS

    echo "üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ..."; local WG_INTERFACE="wg-$CONFIG_NAME"
    local was_active=false; if sudo wg show "$WG_INTERFACE" &>/dev/null; then was_active=true; sudo wg-quick down "$WG_INTERFACE" &>/dev/null; fi

    local ENDPOINT; ENDPOINT=$(get_server_endpoint "$SERVER_CONFIG_PATH")
    if [[ "$ENDPOINT" == error* ]]; then echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Endpoint: $ENDPOINT"; if $was_active; then sudo wg-quick up "$WG_INTERFACE" &>/dev/null; fi; return 1; fi

    local SERVER_PRIVATE_KEY; SERVER_PRIVATE_KEY=$(sudo grep -oP 'PrivateKey\s*=\s*\K.*' "$SERVER_CONFIG_PATH")
    local SERVER_PUBLIC_KEY; SERVER_PUBLIC_KEY=$(echo "$SERVER_PRIVATE_KEY" | wg pubkey)
    local WG_SUBNET_V4; WG_SUBNET_V4=$(sudo grep -oP 'Address\s*=\s*\K[0-9]+\.[0-9]+\.[0-9]+\.1\/24' "$SERVER_CONFIG_PATH" | sed 's/\.1\/24$/.0\/24/')
    local WG_NETWORK_V4_PREFIX; WG_NETWORK_V4_PREFIX=$(echo "$WG_SUBNET_V4" | cut -d'.' -f1-3)
    local WG_NETWORK_V6_PREFIX; if $has_ipv6; then WG_NETWORK_V6_PREFIX=$(sudo grep -oP 'Address\s*=\s*\Kfd42:42:[0-9a-f:]+' "$SERVER_CONFIG_PATH" | head -1); fi

    mapfile -t used_ip_octets < <(sudo grep "AllowedIPs" "$SERVER_CONFIG_PATH" | grep -oP '\.([0-9]+)/' | tr -d './' | sort -n)
    mapfile -t existing_lan_subnets < <(sudo grep "LAN:" "$SERVER_CONFIG_PATH" | grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/24')
    
    local new_peers_blocks=()
    local newly_added_lan_subnets=()

    for i in $(seq 1 $new_peer_count); do
        local next_peer_num; local peer_file_path
        if [ ! -f "$CONFIG_DIR/${PEER_TYPE}.conf" ]; then
            next_peer_num=1; peer_file_path="$CONFIG_DIR/${PEER_TYPE}.conf"
        else
            for num in {2..254}; do
                if [ ! -f "$CONFIG_DIR/${PEER_TYPE}${num}.conf" ]; then
                    next_peer_num=$num; peer_file_path="$CONFIG_DIR/${PEER_TYPE}${num}.conf"; break
                fi; done; fi
        if [ -z "$peer_file_path" ]; then echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä/–∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∏—Ä–∞."; break; fi

        local next_ip_octet; for octet in {2..254}; do local is_used=false; for used_octet in "${used_ip_octets[@]}"; do if [[ "$octet" == "$used_octet" ]]; then is_used=true; break; fi; done; if ! $is_used; then next_ip_octet=$octet; break; fi; done
        if [ -z "$next_ip_octet" ]; then echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π IP-–∞–¥—Ä–µ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∏—Ä–∞."; break; fi
        used_ip_octets+=("$next_ip_octet") 

        local PEER_IP_V4="${WG_NETWORK_V4_PREFIX}.${next_ip_octet}"
        local PEER_IP_V6=""; if $has_ipv6; then PEER_IP_V6="${WG_NETWORK_V6_PREFIX}${next_ip_octet}"; fi
        local PEER_PRIVKEY PEER_PUBKEY PEER_PSK; PEER_PRIVKEY=$(wg genkey); PEER_PUBKEY=$(echo "$PEER_PRIVKEY" | wg pubkey); PEER_PSK=$(wg genpsk)
        
        local PEER_ALLOWED_IPS_ON_SERVER="$PEER_IP_V4/32"; if [ -n "$PEER_IP_V6" ]; then PEER_ALLOWED_IPS_ON_SERVER+=", $PEER_IP_V6/128"; fi
        
        local peer_comment_for_file="# ${PEER_TYPE^} $next_peer_num for $CONFIG_NAME"
        local server_peer_comment="# Peer: ${PEER_TYPE^} $next_peer_num"
        local peer_address="$PEER_IP_V4/24"; if [ -n "$PEER_IP_V6" ]; then peer_address+=", $PEER_IP_V6/64"; fi
        local new_lan_subnet=""
        
        if [[ "$PEER_TYPE" == "router" ]] && [[ "$config_mode" != *"[–°–µ—Ä–≤–µ—Ä]"* ]]; then
            get_router_lan_subnet new_lan_subnet "$next_peer_num" "$WG_SUBNET_V4" "${existing_lan_subnets[@]}" "${newly_added_lan_subnets[@]}"
            if [ -z "$new_lan_subnet" ]; then echo "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Å–µ—Ç–∏."; break; fi
            newly_added_lan_subnets+=("$new_lan_subnet")
            PEER_ALLOWED_IPS_ON_SERVER+=", $new_lan_subnet"
            local lan_comment_part=" (LAN: $new_lan_subnet)"
            peer_comment_for_file+="$lan_comment_part"; server_peer_comment+="$lan_comment_part"
        fi
        
        {
            echo "$peer_comment_for_file"; echo "[Interface]"; echo "PrivateKey = $PEER_PRIVKEY"; echo "Address = $peer_address"
            if [[ "$PEER_TYPE" == "client" && -n "$DNS_SETTINGS" ]]; then echo "$DNS_SETTINGS"; fi
            if [ -n "$OBFUSCATION_SETTINGS" ]; then printf "%s\n" "$OBFUSCATION_SETTINGS"; fi
            echo ""; echo "[Peer]"; echo "PublicKey = $SERVER_PUBLIC_KEY"; echo "PresharedKey = $PEER_PSK"; echo "Endpoint = $ENDPOINT"
            
            local peer_file_allowed_ips
            if [[ "$PEER_TYPE" == "client" ]]; then
                if [[ "$config_mode" == *"[LAN]"* ]]; then # –†–µ–∂–∏–º 3
                    peer_file_allowed_ips=$(generate_client_allowed_ips_string "$WG_SUBNET_V4" "${existing_lan_subnets[@]}" "$new_lan_subnet")
                else # –†–µ–∂–∏–º 1 –∏ 2
                    peer_file_allowed_ips="0.0.0.0/0, ::/0"
                fi
            else # –î–ª—è —Ä–æ—É—Ç–µ—Ä–æ–≤
                if [[ "$config_mode" == *"[–†–æ—É—Ç–µ—Ä]"* ]]; then # –†–µ–∂–∏–º 2
                    peer_file_allowed_ips="$WG_SUBNET_V4, 0.0.0.0/0, ::/0"
                else # –†–µ–∂–∏–º 3
                    peer_file_allowed_ips="$WG_SUBNET_V4, $new_lan_subnet"
                fi
            fi
            echo "AllowedIPs = $peer_file_allowed_ips"
            echo "PersistentKeepalive = 25"
        } | sudo tee "$peer_file_path" > /dev/null

        local block; block=$(cat <<EOF
$server_peer_comment
[Peer]
PublicKey = $PEER_PUBKEY
PresharedKey = $PEER_PSK
AllowedIPs = $PEER_ALLOWED_IPS_ON_SERVER
PersistentKeepalive = 25
EOF
)
        new_peers_blocks+=("$block"); sudo chmod 600 "$peer_file_path"
    done

    if [ ${#new_peers_blocks[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∏—Ä–∞."; if $was_active; then sudo wg-quick up "$WG_INTERFACE" &>/dev/null; fi; return; fi

    local final_lan_subnets=("${existing_lan_subnets[@]}" "${newly_added_lan_subnets[@]}")
    if [[ "$config_mode" != *"[–°–µ—Ä–≤–µ—Ä]"* ]] && [ ${#final_lan_subnets[@]} -gt 0 ]; then
        local client_final_allowed_ips=$(generate_client_allowed_ips_string "$WG_SUBNET_V4" "${final_lan_subnets[@]}")
        
        for peer_file in "$CONFIG_DIR"/{router,client}*.conf; do
            if [ ! -f "$peer_file" ]; then continue; fi
            
            if [[ "$(basename "$peer_file")" == client* ]]; then
                 if [[ "$config_mode" == *"[–†–æ—É—Ç–µ—Ä]"* ]]; then # –†–µ–∂–∏–º 2
                    sudo sed -i "s|^AllowedIPs = .*|AllowedIPs = 0.0.0.0/0, ::/0|" "$peer_file"
                 else # –†–µ–∂–∏–º 3
                    sudo sed -i "s|^AllowedIPs = .*|AllowedIPs = $client_final_allowed_ips|" "$peer_file"
                 fi
            elif [[ "$(basename "$peer_file")" == router* ]]; then
                local router_lan; router_lan=$(grep "# Router" "$peer_file" | grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/24')
                local router_final_allowed_ips
                if [[ "$config_mode" == *"[–†–æ—É—Ç–µ—Ä]"* ]]; then # –†–µ–∂–∏–º 2
                    router_final_allowed_ips="$WG_SUBNET_V4, 0.0.0.0/0, ::/0"
                else # –†–µ–∂–∏–º 3
                    router_final_allowed_ips="$WG_SUBNET_V4, $router_lan"
                fi
                sudo sed -i "s|^AllowedIPs = .*|AllowedIPs = $router_final_allowed_ips|" "$peer_file"
            fi
        done
    fi

    local TEMP_CONFIG; TEMP_CONFIG=$(mktemp); sudo sed -n '1,/^$/p' "$SERVER_CONFIG_PATH" > "$TEMP_CONFIG"
    local router_blocks=(); local client_blocks=(); while IFS= read -r -d '' peer_block; do if [[ -z "$peer_block" || "$peer_block" == $'\n' ]]; then continue; fi; if [[ "$peer_block" =~ Peer:[[:space:]]+Router ]]; then router_blocks+=("$peer_block"); elif [[ "$peer_block" =~ Peer:[[:space:]]+Client ]]; then client_blocks+=("$peer_block"); fi; done < <(sudo awk 'BEGIN{RS="\n\n"; ORS="\0"} /^# Peer:/{print}' "$SERVER_CONFIG_PATH")
    
    if [[ "$PEER_TYPE" == "router" ]]; then
        router_blocks+=("${new_peers_blocks[@]}")
    else
        client_blocks+=("${new_peers_blocks[@]}")
    fi

    all_peer_blocks=("${router_blocks[@]}" "${client_blocks[@]}")
    for block in "${all_peer_blocks[@]}"; do printf "\n\n%s" "$block" >> "$TEMP_CONFIG"; done

    local CLEANED_CONFIG; CLEANED_CONFIG=$(mktemp)
    sudo awk 'NF > 0 {if (blanks) print ""; print; blanks=0; next} {blanks=1}' "$TEMP_CONFIG" > "$CLEANED_CONFIG"
    sudo cp "$CLEANED_CONFIG" "$SERVER_CONFIG_PATH"; rm "$TEMP_CONFIG" "$CLEANED_CONFIG"

    if $was_active; then sudo wg-quick up "$WG_INTERFACE" &>/dev/null; verify_tunnel_activation "$WG_INTERFACE"; fi
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ $new_peer_count –Ω–æ–≤—ã—Ö –ø–∏—Ä–æ–≤ —Ç–∏–ø–∞ '$PEER_TYPE'."; if command -v pause_and_wait &>/dev/null; then pause_and_wait; fi; return 0
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
edit_delete_peers() {
    local CONFIG_NAME=$1; local PEER_TYPE=$2; local CONFIG_DIR="/etc/wireguard/$CONFIG_NAME"; local SERVER_CONFIG_PATH
    SERVER_CONFIG_PATH=$(sudo find "$CONFIG_DIR" -name "wg-*.conf" -print -quit 2>/dev/null)
    if [ -z "$SERVER_CONFIG_PATH" ]; then echo "‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"; return 1; fi

    local deletable_peers=(); while IFS= read -r -d '' file; do deletable_peers+=("$file"); done < <(sudo find "$CONFIG_DIR" -name "${PEER_TYPE}*.conf" -type f -print0 2>/dev/null | sort -zV)
    if [ ${#deletable_peers[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç –ø–∏—Ä–æ–≤ —Ç–∏–ø–∞ '$PEER_TYPE' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."; if command -v pause_and_wait &>/dev/null; then pause_and_wait; fi; return 1; fi
    
    local current_gateway_pubkey=""; if [[ "$PEER_TYPE" == "router" ]]; then current_gateway_pubkey=$(sudo awk 'BEGIN{RS="\n\n"} /\[Peer\]/ && /0\.0\.0\.0\/0/ {match($0, /PublicKey = ([^\n]+)/, arr); if (arr[1]) print arr[1]}' "$SERVER_CONFIG_PATH" | head -1); fi

    local peers_to_delete=(); local pubkeys_to_delete=()
    while true; do
        echo; echo "üë• –í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ '$CONFIG_NAME':"
        for i in "${!deletable_peers[@]}"; do
            local peer_file_path="${deletable_peers[$i]}"; local display_name=$(basename "$peer_file_path"); local suffix=""
            if [[ "$PEER_TYPE" == "router" && -n "$current_gateway_pubkey" ]]; then
                local peer_privkey=$(sudo grep -oP 'PrivateKey\s*=\s*\K.*' "$peer_file_path" 2>/dev/null); if [ -n "$peer_privkey" ] && [[ "$(echo "$peer_privkey" | wg pubkey 2>/dev/null)" == "$current_gateway_pubkey" ]]; then suffix=" [üåê —Ç–µ–∫—É—â–∏–π —à–ª—é–∑]"; fi
            fi; echo "   $((i+1))) $display_name$suffix"
        done; echo

        read -p "‚ùì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): " -a choices
        if [ ${#choices[@]} -eq 0 ]; then echo "‚öôÔ∏è  –û—Ç–º–µ–Ω–∞."; return 1; fi

        peers_to_delete=(); pubkeys_to_delete=(); local selection_is_valid=true
        for choice in "${choices[@]}"; do
            if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#deletable_peers[@]}" ]; then echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ '$choice'."; selection_is_valid=false; break; fi
            local peer_file_path="${deletable_peers[$((choice-1))]}"; local peer_privkey=$(sudo grep -oP 'PrivateKey\s*=\s*\K.*' "$peer_file_path" 2>/dev/null); if [ -z "$peer_privkey" ]; then continue; fi
            local pubkey=$(echo "$peer_privkey" | wg pubkey 2>/dev/null); if [ -z "$pubkey" ]; then continue; fi
            if [[ "$PEER_TYPE" == "router" && "$pubkey" == "$current_gateway_pubkey" ]]; then echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä $(basename "$peer_file_path"), —Ç–∞–∫ –∫–∞–∫ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º —à–ª—é–∑–æ–º."; selection_is_valid=false; break; fi
            peers_to_delete+=("$peer_file_path"); pubkeys_to_delete+=("$pubkey")
        done

        if ! $selection_is_valid; then echo "‚ùå –í–∞—à –≤—ã–±–æ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."; continue; fi
        if [ ${#peers_to_delete[@]} -ge ${#deletable_peers[@]} ]; then echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–∏—Ä–æ–≤ —Ç–∏–ø–∞ '$PEER_TYPE'."; echo "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."; continue; fi
        if [ ${#peers_to_delete[@]} -gt 0 ]; then break; fi
    done
    
    read -p "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤? (1 - –¥–∞, 2 - –Ω–µ—Ç): " confirm
    if [[ "$confirm" != "1" ]]; then echo "‚öôÔ∏è  –û—Ç–º–µ–Ω–µ–Ω–æ."; return 1; fi

    local WG_INTERFACE="wg-$CONFIG_NAME"; local was_active=false
    if sudo wg show "$WG_INTERFACE" &>/dev/null; then was_active=true; sudo wg-quick down "$WG_INTERFACE" &>/dev/null; fi

    local TEMP_CONFIG; TEMP_CONFIG=$(mktemp); sudo sed -n '1,/^$/p' "$SERVER_CONFIG_PATH" > "$TEMP_CONFIG"
    
    while IFS= read -r -d '' peer_block; do
        if [[ -z "$peer_block" || "$peer_block" == $'\n' ]]; then continue; fi
        local peer_pubkey; peer_pubkey=$(echo "$peer_block" | grep -oP 'PublicKey\s*=\s*\K.*'); local should_delete=false
        for del_pubkey in "${pubkeys_to_delete[@]}"; do if [[ -n "$peer_pubkey" && "$peer_pubkey" == "$del_pubkey" ]]; then should_delete=true; break; fi; done
        if ! $should_delete; then printf "\n\n%s" "$peer_block" >> "$TEMP_CONFIG"; fi
    done < <(sudo awk 'BEGIN{RS="\n\n"; ORS="\0"} /^# Peer:/{print}' "$SERVER_CONFIG_PATH")
    
    for peer_path in "${peers_to_delete[@]}"; do echo "   - –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $(basename "$peer_path")..."; sudo rm "$peer_path"; done

    local CLEANED_CONFIG; CLEANED_CONFIG=$(mktemp)
    sudo awk 'NF > 0 {if (blanks) print ""; print; blanks=0; next} {blanks=1}' "$TEMP_CONFIG" > "$CLEANED_CONFIG"
    sudo cp "$CLEANED_CONFIG" "$SERVER_CONFIG_PATH"; rm "$TEMP_CONFIG" "$CLEANED_CONFIG"

    if $was_active; then sudo wg-quick up "$WG_INTERFACE" &>/dev/null; verify_tunnel_activation "$WG_INTERFACE"; fi
    
    echo "‚úÖ –£–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∏—Ä—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã."; if command -v pause_and_wait &>/dev/null; then pause_and_wait; fi; return 0
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
run_edit_flow_for_config() {
    local CONFIG_NAME=$1; local total_configs=$2; local current_config_index=$3
    while true; do
        clear; local mode; mode=$(get_config_mode "$CONFIG_NAME")
        local server_conf_path; server_conf_path=$(sudo find "/etc/wireguard/$CONFIG_NAME" -name "wg-*.conf" -print -quit 2>/dev/null)
        echo "‚öôÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '$CONFIG_NAME' $mode"; echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        local back_option_num=5
        
        if sudo grep -q "(Mode 2)" "$server_conf_path" 2>/dev/null; then
            echo "1. –°–º–µ–Ω–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
            echo "2. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏ –¥–ª—è –≤—Å–µ—Ö"
            echo "3. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏ –¢–û–õ–¨–ö–û –¥–ª—è —Ä–æ—É—Ç–µ—Ä–æ–≤"
            echo "4. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏ –¢–û–õ–¨–ö–û –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
            echo "5. –î–æ–±–∞–≤–∏—Ç—å —Ä–æ—É—Ç–µ—Ä—ã"
            echo "6. –£–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä—ã"
            echo "7. –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤"
            echo "8. –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤"
            back_option_num=9
        elif sudo grep -q "(Mode 3)" "$server_conf_path" 2>/dev/null; then
            echo "1. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏ –¥–ª—è –≤—Å–µ—Ö"
            echo "2. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏ –¢–û–õ–¨–ö–û –¥–ª—è —Ä–æ—É—Ç–µ—Ä–æ–≤"
            echo "3. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏ –¢–û–õ–¨–ö–û –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
            echo "4. –î–æ–±–∞–≤–∏—Ç—å —Ä–æ—É—Ç–µ—Ä—ã"
            echo "5. –£–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä—ã"
            echo "6. –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤"
            echo "7. –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤"
            back_option_num=8
        else # –†–µ–∂–∏–º 1
            echo "1. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏ –¥–ª—è –≤—Å–µ—Ö"
            echo "2. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
            echo "3. –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤"
            echo "4. –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤"
        fi

        if [ "$total_configs" -gt 1 ] && [ "$current_config_index" -lt "$total_configs" ]; then
            echo "$back_option_num. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            back_option_num=$((back_option_num + 1))
        fi
        echo "$back_option_num. –ù–∞–∑–∞–¥"; echo; read -p "-> " choice

        if sudo grep -q "(Mode 2)" "$server_conf_path" 2>/dev/null; then
            case $choice in
                1) edit_change_gateway "$CONFIG_NAME" && break ;; 2) edit_recreate_keys_flow "$CONFIG_NAME" "all" && break ;;
                3) edit_recreate_keys_flow "$CONFIG_NAME" "router" && break ;; 4) edit_recreate_keys_flow "$CONFIG_NAME" "client" && break ;;
                5) edit_add_peers "$CONFIG_NAME" "router" && break ;; 6) edit_delete_peers "$CONFIG_NAME" "router" && break ;;
                7) edit_add_peers "$CONFIG_NAME" "client" && break ;; 8) edit_delete_peers "$CONFIG_NAME" "client" && break ;;
                9) if [ "$back_option_num" -eq 10 ]; then break; else return 1; fi ;;
                10) return 1 ;; *) clear
            esac
        elif sudo grep -q "(Mode 3)" "$server_conf_path" 2>/dev/null; then
             case $choice in
                1) edit_recreate_keys_flow "$CONFIG_NAME" "all" && break ;;
                2) edit_recreate_keys_flow "$CONFIG_NAME" "router" && break ;; 3) edit_recreate_keys_flow "$CONFIG_NAME" "client" && break ;;
                4) edit_add_peers "$CONFIG_NAME" "router" && break ;; 5) edit_delete_peers "$CONFIG_NAME" "router" && break ;;
                6) edit_add_peers "$CONFIG_NAME" "client" && break ;; 7) edit_delete_peers "$CONFIG_NAME" "client" && break ;;
                8) if [ "$back_option_num" -eq 9 ]; then break; else return 1; fi ;;
                9) return 1 ;; *) clear
            esac
        else # –†–µ–∂–∏–º 1
            case $choice in
                1) edit_recreate_keys_flow "$CONFIG_NAME" "all" && break ;; 2) edit_recreate_keys_flow "$CONFIG_NAME" "client" && break ;;
                3) edit_add_peers "$CONFIG_NAME" "client" && break ;; 4) edit_delete_peers "$CONFIG_NAME" "client" && break ;;
                5) if [ "$back_option_num" -eq 6 ]; then break; else return 1; fi ;;
                6) return 1 ;; *) clear
            esac
        fi
    done
    return 0
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
edit_configs_menu() {
    while true; do
        clear; echo "‚öôÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "1. –ò–∑–º–µ–Ω–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "2. –ò–∑–º–µ–Ω–∏—Ç—å –í–°–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"; echo "3. –ù–∞–∑–∞–¥"
        read -p "-> " choice; echo; case $choice in 1 | 2) break ;; 3) return 0 ;; *) clear ;; esac
    done
    
    local all_configs=(); while IFS= read -r -d '' dir; do all_configs+=("$(basename "$dir")"); done < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -print0 2>/dev/null | sort -z)
    if [ ${#all_configs[@]} -eq 0 ]; then echo -e "‚öôÔ∏è  –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n"; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."; return 0; fi

    local configs_to_edit=()
    case $choice in
        1)
            echo "‚öôÔ∏è  –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"; echo
            for i in "${!all_configs[@]}"; do
                local conf_name="${all_configs[$i]}"; local icon="üî¥"; if is_config_truly_active "$conf_name"; then icon="üü¢"; fi
                local mode; mode=$(get_config_mode "$conf_name"); echo "$icon $((i+1)). $conf_name $mode"
            done; echo
            read -p "‚ùì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): " -a choices
            if [ ${#choices[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."; return 0; fi
            for num in "${choices[@]}"; do
                if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 1 ] && [ "$num" -le "${#all_configs[@]}" ]; then configs_to_edit+=("${all_configs[$((num-1))]}"); else echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ '$num'."; fi
            done ;;
        2) configs_to_edit=("${all_configs[@]}") ;;
    esac

    if [ ${#configs_to_edit[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ –≤—ã–±—Ä–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."; read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."; return 0; fi

    local i=1
    for conf_name in "${configs_to_edit[@]}"; do if ! run_edit_flow_for_config "$conf_name" "${#configs_to_edit[@]}" "$i"; then break; fi; i=$((i+1)); done
}

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –§–£–ù–ö–¶–ò–ô –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

# --- –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –û–î–ù–û–ô –ò–õ–ò –ù–ï–°–ö–û–õ–¨–ö–ò–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ---
delete_specific_configs() {
    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true | sort)
    if [ ${#all_configs[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."; pause_and_wait; return; fi
    echo -e "‚öôÔ∏è  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n";
    for i in "${!all_configs[@]}"; do
        local conf_name="${all_configs[$i]}"; local icon="üî¥"; if is_config_truly_active "$conf_name"; then icon="üü¢"; fi; echo "$icon $((i+1)). $conf_name"
    done; echo
    read -p "‚ùì –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ): " -a choices
    if [ ${#choices[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."; return; fi
    local valid_configs_to_delete=()
    for choice in "${choices[@]}"; do
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#all_configs[@]}" ]; then
            valid_configs_to_delete+=("${all_configs[$((choice-1))]}")
        else echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ '$choice'."; fi
    done
    if [ ${#valid_configs_to_delete[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ –≤—ã–±—Ä–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."; return; fi
    
    echo -e "\nüî• –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n"
    for conf in "${valid_configs_to_delete[@]}"; do
        if is_config_truly_active "$conf"; then
            echo "üü¢ $conf"
        else
            echo "üî¥ $conf"
        fi
    done
    echo
    
    read -p "‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (1 - –¥–∞, 2 - –Ω–µ—Ç): " confirm
    if [[ "$confirm" != "1" ]]; then echo "‚öôÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."; return; fi
    
    apply_deep_clean "${valid_configs_to_delete[@]}"
}

# --- –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –í–°–ï–• –í–ö–õ–Æ–ß–ï–ù–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ---
delete_all_running_configs() {
    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true)
    local running_configs=(); for conf_name in "${all_configs[@]}"; do if is_config_truly_active "$conf_name"; then running_configs+=("$conf_name"); fi; done
    if [ ${#running_configs[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."; pause_and_wait; return; fi

    echo -e "üî• –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–ö–õ–Æ–ß–ï–ù–ù–´–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n"; for conf in "${running_configs[@]}"; do echo "üü¢ $conf"; done; echo
    read -p "‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (1 - –¥–∞, 2 - –Ω–µ—Ç): " confirm
    if [[ "$confirm" != "1" ]]; then echo "‚öôÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."; return; fi

    apply_deep_clean "${running_configs[@]}"
}

# --- –§–£–ù–ö–¶–ò–Ø: –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –í–´–ö–õ–Æ–ß–ï–ù–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ---
delete_all_stopped_configs() {
    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true)
    local stopped_configs=(); for conf_name in "${all_configs[@]}"; do if ! is_config_truly_active "$conf_name"; then stopped_configs+=("$conf_name"); fi; done
    if [ ${#stopped_configs[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."; pause_and_wait; return; fi

    echo -e "üî• –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–´–ö–õ–Æ–ß–ï–ù–ù–´–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n"; for conf in "${stopped_configs[@]}"; do echo "üî¥ $conf"; done; echo
    read -p "‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (1 - –¥–∞, 2 - –Ω–µ—Ç): " choice
    if [[ "$choice" != "1" ]]; then echo "‚öôÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."; return; fi

    apply_deep_clean "${stopped_configs[@]}"
}

# --- –§–£–ù–ö–¶–ò–Ø: –£–î–ê–õ–ï–ù–ò–ï –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ---
delete_all_configs() {
    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true)
    if [ ${#all_configs[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."; pause_and_wait; return; fi
    
    echo "üî•üî•üî• –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï! üî•üî•üî•"
    echo -e "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n"
    for conf in "${all_configs[@]}"; do
        if is_config_truly_active "$conf"; then
            echo "üü¢ $conf"
        else
            echo "üî¥ $conf"
        fi
    done
    echo
    
    read -p "‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (1 - –¥–∞, 2 - –Ω–µ—Ç): " confirm
    if [[ "$confirm" != "1" ]]; then echo "‚õî –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."; return; fi
    
    apply_deep_clean "${all_configs[@]}"
}

# --- –û–ë–©–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ---
run_activation_logic() {
    local configs_to_activate=("$@")
    if [ ${#configs_to_activate[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."; return; fi
    
    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true)
    local running_configs=(); for conf_name in "${all_configs[@]}"; do if is_config_truly_active "$conf_name"; then running_configs+=("$conf_name"); fi; done

    echo "üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã..."; declare -A running_params
    for r_conf in "${running_configs[@]}"; do
        r_path=$(sudo find "/etc/wireguard/$r_conf" -name "wg-*.conf" -print -quit 2>/dev/null); if [ -f "$r_path" ]; then
            port=$(sudo grep -oP 'ListenPort\s*=\s*\K[0-9]+' "$r_path" | head -n 1 || echo ""); subnet=$(sudo grep -oP 'Address\s*=\s*10\.\K[0-9]+\.[0-9]+' "$r_path" | head -n 1 || echo "")
            if [ -n "$port" ]; then running_params["port:$port"]="$r_conf"; fi; if [ -n "$subnet" ]; then running_params["subnet:$subnet"]="$r_conf"; fi
        fi
    done

    local safe_to_activate=(); local conflicting_stopped_configs=(); declare -A conflicts_map
    for s_conf in "${configs_to_activate[@]}"; do
        s_path=$(sudo find "/etc/wireguard/$s_conf" -name "wg-*.conf" -print -quit 2>/dev/null); is_conflicting=false
        if [ ! -f "$s_path" ]; then echo "‚ö†Ô∏è  –í '$s_conf' –Ω–µ –Ω–∞–π–¥–µ–Ω wg-*.conf. –ü—Ä–æ–ø—É—Å–∫–∞—é."; continue; fi
        port=$(sudo grep -oP 'ListenPort\s*=\s*\K[0-9]+' "$s_path" | head -n 1 || echo ""); subnet=$(sudo grep -oP 'Address\s*=\s*10\.\K[0-9]+\.[0-9]+' "$s_path" | head -n 1 || echo "")
        if [ -n "$port" ] && [ -n "${running_params["port:$port"]}" ]; then is_conflicting=true; conflicts_map["$s_conf"]="${running_params["port:$port"]}"; fi
        if [ -n "$subnet" ] && [ -n "${running_params["subnet:$subnet"]}" ]; then is_conflicting=true; conflicts_map["$s_conf"]="${running_params["subnet:$subnet"]}"; fi
        if $is_conflicting; then conflicting_stopped_configs+=("$s_conf"); else safe_to_activate+=("$s_conf"); fi
    done

    if [ ${#conflicting_stopped_configs[@]} -gt 0 ]; then
        echo; echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã!"; declare -A conflicting_working_display
        for stopped_conf in "${conflicting_stopped_configs[@]}"; do conflicting_working_display["${conflicts_map[$stopped_conf]}"]=1; done
        echo "1. –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${!conflicting_working_display[*]}"; echo "2. –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–≤—ã–∑—ã–≤–∞—é—â–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç): ${conflicting_stopped_configs[*]}"; echo
        echo "‚ùì –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?"; echo; echo "1) –ó–∞–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"; echo "2) –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–º–µ–Ω—É"; echo
        read -p "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [1-2]: " conflict_choice
        case $conflict_choice in
            1) echo "–í—ã–±—Ä–∞–Ω–æ: –ó–∞–º–µ–Ω–∏—Ç—å."; apply_deep_clean "${!conflicting_working_display[@]}"; safe_to_activate+=("${conflicting_stopped_configs[@]}");;
            *) echo "‚öôÔ∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã.";;
        esac
    fi
    
    if [ ${#safe_to_activate[@]} -eq 0 ]; then echo; echo "‚öôÔ∏è  –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞."; return; fi
    
    echo; echo "üöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: ${safe_to_activate[*]}"
    for conf_name in "${safe_to_activate[@]}"; do
        local WG_INTERFACE="wg-$conf_name"; local CONFIG_DIR="/etc/wireguard/$conf_name"
        local SERVER_CONFIG_PATH=$(sudo find "$CONFIG_DIR" -name "wg-*.conf" -print -quit 2>/dev/null)
        if [ -z "$SERVER_CONFIG_PATH" ]; then echo "   - ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω .conf –¥–ª—è '$conf_name', –ø—Ä–æ–ø—É—Å–∫–∞—é."; continue; fi
        sudo ln -sf "$SERVER_CONFIG_PATH" "/etc/wireguard/${WG_INTERFACE}.conf"
        echo "   - –ó–∞–ø—É—Å–∫ '$conf_name'..."; sudo systemctl enable --now "wg-quick@${WG_INTERFACE}"
        verify_tunnel_activation "$WG_INTERFACE"
    done
}

# --- –§–£–ù–ö–¶–ò–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò –í–°–ï–• –ù–ï–ê–ö–¢–ò–í–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ---
activate_all_stopped_configs() {
    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true | sort)
    local stopped_configs=(); for conf_name in "${all_configs[@]}"; do if ! is_config_truly_active "$conf_name"; then stopped_configs+=("$conf_name"); fi; done
    if [ ${#stopped_configs[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."; pause_and_wait; return; fi
    echo "‚öôÔ∏è  –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${stopped_configs[*]}"; echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é –í–°–ï –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    run_activation_logic "${stopped_configs[@]}"; pause_and_wait
}

# --- –§–£–ù–ö–¶–ò–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò –û–î–ù–û–ô –ò–õ–ò –ù–ï–°–ö–û–õ–¨–ö–ò–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ---
activate_specific_configs() {
    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true | sort)
    local stopped_configs=(); for conf_name in "${all_configs[@]}"; do if ! is_config_truly_active "$conf_name"; then stopped_configs+=("$conf_name"); fi; done
    if [ ${#stopped_configs[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."; pause_and_wait; return; fi

    echo "‚öôÔ∏è  –í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:";
    for i in "${!stopped_configs[@]}"; do echo "üî¥ $((i+1)). ${stopped_configs[$i]}"; done; echo

    read -p "‚ùì –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ): " -a choices
    if [ ${#choices[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."; return; fi

    local configs_to_activate=()
    for choice in "${choices[@]}"; do
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#stopped_configs[@]}" ]; then
            configs_to_activate+=("${stopped_configs[$((choice-1))]}")
        else echo "‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ '$choice'!"; fi
    done
    run_activation_logic "${configs_to_activate[@]}"; pause_and_wait
}

# --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô –î–õ–Ø –°–í–û–î–ö–ò –ò –°–û–°–¢–û–Ø–ù–ò–Ø ---

# --- –§–£–ù–ö–¶–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–í–û–î–ö–ò –î–õ–Ø –û–î–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
show_summary_for_config() {
    local CONFIG_NAME=$1; local CONFIG_DIR="/etc/wireguard/$CONFIG_NAME"; local SERVER_CONFIG_PATH
    SERVER_CONFIG_PATH=$(sudo find "$CONFIG_DIR" -name "wg-*.conf" -print -quit 2>/dev/null)
    if [ ! -f "$SERVER_CONFIG_PATH" ]; then echo "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è '$CONFIG_NAME'."; return; fi
    
    local SERVER_IP; SERVER_IP=$(get_server_public_ip)
    if [ "$SERVER_IP" == "error" ]; then SERVER_IP="<–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å>"; fi

    echo "üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø '$CONFIG_NAME':"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

    if sudo grep -q "(Mode 1)" "$SERVER_CONFIG_PATH"; then
        echo "üë• –ö–ª–∏–µ–Ω—Ç—ã ‚ÆÇ ‚òÅÔ∏è  –°–µ—Ä–≤–µ—Ä ‚ÆÇ üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç"
    elif sudo grep -q "(Mode 2)" "$SERVER_CONFIG_PATH"; then
        echo "üë• –ö–ª–∏–µ–Ω—Ç—ã ‚ÆÇ ‚òÅÔ∏è  –°–µ—Ä–≤–µ—Ä ‚ÆÇ üì° –†–æ—É—Ç–µ—Ä(—ã) ‚ÆÇ üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç + üè† LAN"
        local gateway_router_info; gateway_router_info=$(sudo grep "0.0.0.0/0" "$SERVER_CONFIG_PATH" -B 4 | grep "# Peer:" | head -n 1)
        if [ -n "$gateway_router_info" ]; then echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"; echo -e "üì° ${gateway_router_info#\# Peer: } - —Ç–µ–∫—É—â–∏–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.\nüí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å NAT –¥–ª—è WireGuard –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\nüîó https://github.com/Internet-Helper/WireGuard-Auto-Setup-Script/wiki"; else echo "‚ö†Ô∏è  –†–æ—É—Ç–µ—Ä –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!"; fi
    elif sudo grep -q "(Mode 3)" "$SERVER_CONFIG_PATH"; then
        echo "üë• –ö–ª–∏–µ–Ω—Ç—ã ‚ÆÇ ‚òÅÔ∏è  –°–µ—Ä–≤–µ—Ä ‚ÆÇ üì° –†–æ—É—Ç–µ—Ä(—ã) ‚ÆÇ üè† LAN"
    else
        echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è '$CONFIG_NAME'."
    fi
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
}

# --- –ú–ï–ù–Æ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –ò –≠–ö–°–ü–û–†–¢–ê –ö–û–ù–§–ò–ì–û–í ---
info_menu() {
    local choice
    while true; do
        clear; echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"; echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –≤—Å–µ –í–ö–õ–Æ–ß–ï–ù–ù–´–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        echo "3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –≤—Å–µ –í–´–ö–õ–Æ–ß–ï–ù–ù–´–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"; echo "4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –í–°–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"; echo "5. –ù–∞–∑–∞–¥"
        read -p "-> " choice; echo
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
        if [[ -z "$choice" ]]; then
            continue
        fi
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤—ã—Ö–æ–¥, —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º
        if [[ "$choice" == "5" ]]; then
            break
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
        if [[ ! "$choice" =~ ^[1-4]$ ]]; then
            continue
        fi
        
        mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true | sort)
        if [ ${#all_configs[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."; pause_and_wait; return; fi
        local configs_to_show=()
        case $choice in
            1)
                echo "‚öôÔ∏è  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:";
                for i in "${!all_configs[@]}"; do local conf_name="${all_configs[$i]}"; local icon="üî¥"; if is_config_truly_active "$conf_name"; then icon="üü¢"; fi; echo "$icon $((i+1)). $conf_name"; done; echo
                read -p "‚ùì –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ): " -a choices_nums
                if [ ${#choices_nums[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."; continue; fi
                for num in "${choices_nums[@]}"; do if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 1 ] && [ "$num" -le "${#all_configs[@]}" ]; then configs_to_show+=("${all_configs[$((num-1))]}"); else echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ '$num'."; fi; done ;;
            2) for conf_name in "${all_configs[@]}"; do if is_config_truly_active "$conf_name"; then configs_to_show+=("$conf_name"); fi; done; if [ ${#configs_to_show[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."; pause_and_wait; continue; fi ;;
            3) for conf_name in "${all_configs[@]}"; do if ! is_config_truly_active "$conf_name"; then configs_to_show+=("$conf_name"); fi; done; if [ ${#configs_to_show[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."; pause_and_wait; continue; fi ;;
            4) configs_to_show=("${all_configs[@]}") ;;
        esac
        if [ ${#configs_to_show[@]} -gt 0 ]; then
            clear
            for conf_name in "${configs_to_show[@]}"; do show_summary_for_config "$conf_name"; export_configs "$conf_name"; done
            pause_and_wait
        fi
        break 
    done
}

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –°–û–°–¢–û–Ø–ù–ò–Ø (WG SHOW) ---
show_specific_configs_state() {
    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true | sort)
    if [ ${#all_configs[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."; pause_and_wait; return; fi

    echo "‚öôÔ∏è  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:";
    for i in "${!all_configs[@]}"; do local conf_name="${all_configs[$i]}"; local icon="üî¥"; if is_config_truly_active "$conf_name"; then icon="üü¢"; fi; echo "$icon $((i+1)). $conf_name"; done; echo
    
    read -p "‚ùì –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ): " -a choices
    if [ ${#choices[@]} -eq 0 ]; then echo "‚öôÔ∏è  –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."; return; fi

    for choice in "${choices[@]}"; do
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#all_configs[@]}" ]; then
            local conf_name="${all_configs[$((choice-1))]}"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            if is_config_truly_active "$conf_name"; then sudo wg show "wg-$conf_name"; else echo "üî¥ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '$conf_name' –≤—ã–∫–ª—é—á–µ–Ω–∞."; fi
        else echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ '$choice'."; fi
    done
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"; pause_and_wait
}

show_all_configs_state() {
    if ! sudo wg show | grep -q 'interface:'; then echo "‚öôÔ∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."; else sudo wg show; fi; pause_and_wait
}

# --- –ú–ï–ù–Æ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø ---
show_state_menu() {
    while true; do
       clear; echo "‚öôÔ∏è  –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
       echo "1. –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "2. –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –†–ê–ë–û–¢–ê–Æ–©–ò–• –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "3. –ù–∞–∑–∞–¥"
       read -p "-> " choice; echo
       case $choice in 1) show_specific_configs_state; break ;; 2) show_all_configs_state; break ;; 3) break ;; *) clear ;; esac
    done
}

# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ---

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---
run_first_time_setup

while true; do
    clear
    printf "\033[38;2;0;210;106mWireGuard Easy Setup by Internet Helper\033[0m\n"
    printf "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

    mapfile -t all_configs < <(find /etc/wireguard -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2>/dev/null || true | sort)
    running_configs=(); stopped_configs=()
    if [ ${#all_configs[@]} -gt 0 ]; then
        for conf_name in "${all_configs[@]}"; do if is_config_truly_active "$conf_name"; then running_configs+=("$conf_name"); else stopped_configs+=("$conf_name"); fi; done
    fi

    if [ ${#running_configs[@]} -gt 0 ]; then
        echo "‚öôÔ∏è  –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
        for conf in "${running_configs[@]}"; do 
            mode_display=$(get_config_mode "$conf")
            printf "üü¢ %s \033[38;5;242m%s\033[0m\n" "$conf" "$mode_display"
        done
        printf "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    fi
    if [ ${#stopped_configs[@]} -gt 0 ]; then
        echo "‚öôÔ∏è  –í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
        for conf in "${stopped_configs[@]}"; do 
            mode_display=$(get_config_mode "$conf")
            printf "üî¥ %s \033[38;5;242m%s\033[0m\n" "$conf" "$mode_display"
        done
        printf "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    fi
    if [ ${#all_configs[@]} -eq 0 ]; then 
        echo "‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã."
        printf "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    fi

    printf "\033[38;2;0;210;106m0.\033[0m –í—ã–π—Ç–∏\n"
    printf "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    printf "\033[38;2;0;210;106m1.\033[0m –°–æ–∑–¥–∞—Ç—å\n"
    printf "\033[38;2;0;210;106m2.\033[0m –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\n"
    printf "\033[38;2;0;210;106m3.\033[0m –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
    printf "\033[38;2;0;210;106m4.\033[0m –ò–∑–º–µ–Ω–∏—Ç—å\n"
    printf "\033[38;2;0;210;106m5.\033[0m –£–¥–∞–ª–∏—Ç—å\n"
    printf "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    printf "\033[38;2;0;210;106m6.\033[0m –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
    printf "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    printf "\033[38;2;0;210;106m7.\033[0m –°–æ—Å—Ç–æ—è–Ω–∏–µ\n"
    printf "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-7]: " main_choice; echo

    case $main_choice in
        1) create_config ;;
        2)
           clear; echo "‚öôÔ∏è  –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
           while true; do
               echo "1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "2. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –í–°–ï –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"; echo "3. –ù–∞–∑–∞–¥"
               read -p "-> " choice; echo
               case $choice in 1) activate_specific_configs; break ;; 2) activate_all_stopped_configs; break ;; 3) break ;; *) clear; echo "‚öôÔ∏è  –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" ;; esac
           done ;;
        3)
           clear; echo "‚öôÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
           while true; do
               echo "1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –í–°–ï —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"; echo "3. –ù–∞–∑–∞–¥"
               read -p "-> " choice; echo
               case $choice in 1) stop_specific_configs; break ;; 2) stop_all_running_configs; break ;; 3) break ;; *) clear; echo "‚öôÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" ;; esac
           done ;;
        4) edit_configs_menu ;;
        5)
           clear; echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
           while true; do
               echo "1. –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "2. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –í–ö–õ–Æ–ß–ï–ù–ù–´–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
               echo "3. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –í–´–ö–õ–Æ–ß–ï–ù–ù–´–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"; echo "4. –£–¥–∞–ª–∏—Ç—å –í–°–ï –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"; echo "5. –ù–∞–∑–∞–¥"
               read -p "-> " choice; echo
               case $choice in 1) delete_specific_configs; break ;; 2) delete_all_running_configs; break ;; 3) delete_all_stopped_configs; break ;; 4) delete_all_configs; break ;; 5) break ;; *) clear; echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"; echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" ;; esac
            done ;;
        6) info_menu ;;
        7) show_state_menu ;;
        0) exit 0 ;;
        *) esac
done